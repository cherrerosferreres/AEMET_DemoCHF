/* 
 * AEMET OpenData
 *
 * AEMET OpenData es una API REST desarrollado por AEMET que permite la difusión y la reutilización de la información meteorológica y climatológica de la Agencia, en el sentido indicado en la Ley 18/2015, de 9 de julio, por la que se modifica la Ley 37/2007, de 16 de noviembre, sobre reutilización de la información del sector público. (IMPORTANTE: Para poder realizar peticiones, es necesario introducir en API Key haciendo clic en el círculo rojo de recurso REST).
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductosClimatologicosApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Balance hídrico nacional (documento).
        /// </summary>
        /// <remarks>
        /// Se obtiene, para la decema y el año pasados por parámetro, el Boletín Hídrico Nacional que se elabora cada diez días. Se presenta información resumida de forma distribuida para todo el territorio nacional de diferentes variables, en las que se incluye informaciones de la precipitación y la evapotranspiración potencial acumuladas desde el 1 de septiembre.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anio">Año (AAAA)</param>
        /// <param name="decena">Decena de 01 (primera decena) a 36 (última decena)</param>
        /// <returns>Model200</returns>
        Model200 BalanceHdricoNacionalDocumento_ (string anio, string decena);

        /// <summary>
        /// Balance hídrico nacional (documento).
        /// </summary>
        /// <remarks>
        /// Se obtiene, para la decema y el año pasados por parámetro, el Boletín Hídrico Nacional que se elabora cada diez días. Se presenta información resumida de forma distribuida para todo el territorio nacional de diferentes variables, en las que se incluye informaciones de la precipitación y la evapotranspiración potencial acumuladas desde el 1 de septiembre.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anio">Año (AAAA)</param>
        /// <param name="decena">Decena de 01 (primera decena) a 36 (última decena)</param>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> BalanceHdricoNacionalDocumento_WithHttpInfo (string anio, string decena);
        /// <summary>
        /// Capas SHAPE de estaciones climatológicas de AEMET.
        /// </summary>
        /// <remarks>
        /// Capas SHAPE de las distintas estaciones climatológicas de AEMET: automáticas, completas, pluviométricas y termométricas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoestacion"> | Código | Tipo de Estación | |- -- -- -- -- -|- -- -- -- -- -| | automaticas  | Estaciones Automáticas   | | completas  | Estaciones Completas   | | pluviometricas  | Estaciones Pluviométricas   | | termometricas  | Estaciones Termométricas   </param>
        /// <returns>Model200</returns>
        Model200 CapasSHAPEDeEstacionesClimatolgicas_ (string tipoestacion);

        /// <summary>
        /// Capas SHAPE de estaciones climatológicas de AEMET.
        /// </summary>
        /// <remarks>
        /// Capas SHAPE de las distintas estaciones climatológicas de AEMET: automáticas, completas, pluviométricas y termométricas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoestacion"> | Código | Tipo de Estación | |- -- -- -- -- -|- -- -- -- -- -| | automaticas  | Estaciones Automáticas   | | completas  | Estaciones Completas   | | pluviometricas  | Estaciones Pluviométricas   | | termometricas  | Estaciones Termométricas   </param>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> CapasSHAPEDeEstacionesClimatolgicas_WithHttpInfo (string tipoestacion);
        /// <summary>
        /// Resumen mensual climatológico nacional (documento).
        /// </summary>
        /// <remarks>
        /// Resumen climatológico nacional, para el año y mes pasado por parámetro, sobre el estado del clima y la evolución de las principales variables climáticas, en especial temperatura y precipitación, a nivel mensual, estacional y anual.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anio">Año (AAAA)</param>
        /// <param name="mes">Mes (mm)</param>
        /// <returns>Model200</returns>
        Model200 ResumenMensualClimatolgicoNacionalDocumento_ (string anio, string mes);

        /// <summary>
        /// Resumen mensual climatológico nacional (documento).
        /// </summary>
        /// <remarks>
        /// Resumen climatológico nacional, para el año y mes pasado por parámetro, sobre el estado del clima y la evolución de las principales variables climáticas, en especial temperatura y precipitación, a nivel mensual, estacional y anual.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anio">Año (AAAA)</param>
        /// <param name="mes">Mes (mm)</param>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> ResumenMensualClimatolgicoNacionalDocumento_WithHttpInfo (string anio, string mes);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Balance hídrico nacional (documento).
        /// </summary>
        /// <remarks>
        /// Se obtiene, para la decema y el año pasados por parámetro, el Boletín Hídrico Nacional que se elabora cada diez días. Se presenta información resumida de forma distribuida para todo el territorio nacional de diferentes variables, en las que se incluye informaciones de la precipitación y la evapotranspiración potencial acumuladas desde el 1 de septiembre.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anio">Año (AAAA)</param>
        /// <param name="decena">Decena de 01 (primera decena) a 36 (última decena)</param>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> BalanceHdricoNacionalDocumento_Async (string anio, string decena);

        /// <summary>
        /// Balance hídrico nacional (documento).
        /// </summary>
        /// <remarks>
        /// Se obtiene, para la decema y el año pasados por parámetro, el Boletín Hídrico Nacional que se elabora cada diez días. Se presenta información resumida de forma distribuida para todo el territorio nacional de diferentes variables, en las que se incluye informaciones de la precipitación y la evapotranspiración potencial acumuladas desde el 1 de septiembre.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anio">Año (AAAA)</param>
        /// <param name="decena">Decena de 01 (primera decena) a 36 (última decena)</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> BalanceHdricoNacionalDocumento_AsyncWithHttpInfo (string anio, string decena);
        /// <summary>
        /// Capas SHAPE de estaciones climatológicas de AEMET.
        /// </summary>
        /// <remarks>
        /// Capas SHAPE de las distintas estaciones climatológicas de AEMET: automáticas, completas, pluviométricas y termométricas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoestacion"> | Código | Tipo de Estación | |- -- -- -- -- -|- -- -- -- -- -| | automaticas  | Estaciones Automáticas   | | completas  | Estaciones Completas   | | pluviometricas  | Estaciones Pluviométricas   | | termometricas  | Estaciones Termométricas   </param>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> CapasSHAPEDeEstacionesClimatolgicas_Async (string tipoestacion);

        /// <summary>
        /// Capas SHAPE de estaciones climatológicas de AEMET.
        /// </summary>
        /// <remarks>
        /// Capas SHAPE de las distintas estaciones climatológicas de AEMET: automáticas, completas, pluviométricas y termométricas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoestacion"> | Código | Tipo de Estación | |- -- -- -- -- -|- -- -- -- -- -| | automaticas  | Estaciones Automáticas   | | completas  | Estaciones Completas   | | pluviometricas  | Estaciones Pluviométricas   | | termometricas  | Estaciones Termométricas   </param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> CapasSHAPEDeEstacionesClimatolgicas_AsyncWithHttpInfo (string tipoestacion);
        /// <summary>
        /// Resumen mensual climatológico nacional (documento).
        /// </summary>
        /// <remarks>
        /// Resumen climatológico nacional, para el año y mes pasado por parámetro, sobre el estado del clima y la evolución de las principales variables climáticas, en especial temperatura y precipitación, a nivel mensual, estacional y anual.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anio">Año (AAAA)</param>
        /// <param name="mes">Mes (mm)</param>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> ResumenMensualClimatolgicoNacionalDocumento_Async (string anio, string mes);

        /// <summary>
        /// Resumen mensual climatológico nacional (documento).
        /// </summary>
        /// <remarks>
        /// Resumen climatológico nacional, para el año y mes pasado por parámetro, sobre el estado del clima y la evolución de las principales variables climáticas, en especial temperatura y precipitación, a nivel mensual, estacional y anual.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anio">Año (AAAA)</param>
        /// <param name="mes">Mes (mm)</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> ResumenMensualClimatolgicoNacionalDocumento_AsyncWithHttpInfo (string anio, string mes);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductosClimatologicosApi : IProductosClimatologicosApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductosClimatologicosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductosClimatologicosApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductosClimatologicosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductosClimatologicosApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Balance hídrico nacional (documento). Se obtiene, para la decema y el año pasados por parámetro, el Boletín Hídrico Nacional que se elabora cada diez días. Se presenta información resumida de forma distribuida para todo el territorio nacional de diferentes variables, en las que se incluye informaciones de la precipitación y la evapotranspiración potencial acumuladas desde el 1 de septiembre.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anio">Año (AAAA)</param>
        /// <param name="decena">Decena de 01 (primera decena) a 36 (última decena)</param>
        /// <returns>Model200</returns>
        public Model200 BalanceHdricoNacionalDocumento_ (string anio, string decena)
        {
             ApiResponse<Model200> localVarResponse = BalanceHdricoNacionalDocumento_WithHttpInfo(anio, decena);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Balance hídrico nacional (documento). Se obtiene, para la decema y el año pasados por parámetro, el Boletín Hídrico Nacional que se elabora cada diez días. Se presenta información resumida de forma distribuida para todo el territorio nacional de diferentes variables, en las que se incluye informaciones de la precipitación y la evapotranspiración potencial acumuladas desde el 1 de septiembre.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anio">Año (AAAA)</param>
        /// <param name="decena">Decena de 01 (primera decena) a 36 (última decena)</param>
        /// <returns>ApiResponse of Model200</returns>
        public ApiResponse< Model200 > BalanceHdricoNacionalDocumento_WithHttpInfo (string anio, string decena)
        {
            // verify the required parameter 'anio' is set
            if (anio == null)
                throw new ApiException(400, "Missing required parameter 'anio' when calling ProductosClimatologicosApi->BalanceHdricoNacionalDocumento_");
            // verify the required parameter 'decena' is set
            if (decena == null)
                throw new ApiException(400, "Missing required parameter 'decena' when calling ProductosClimatologicosApi->BalanceHdricoNacionalDocumento_");

            var localVarPath = "/api/productos/climatologicos/balancehidrico/{anio}/{decena}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (anio != null) localVarPathParams.Add("anio", this.Configuration.ApiClient.ParameterToString(anio)); // path parameter
            if (decena != null) localVarPathParams.Add("decena", this.Configuration.ApiClient.ParameterToString(decena)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BalanceHdricoNacionalDocumento_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Balance hídrico nacional (documento). Se obtiene, para la decema y el año pasados por parámetro, el Boletín Hídrico Nacional que se elabora cada diez días. Se presenta información resumida de forma distribuida para todo el territorio nacional de diferentes variables, en las que se incluye informaciones de la precipitación y la evapotranspiración potencial acumuladas desde el 1 de septiembre.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anio">Año (AAAA)</param>
        /// <param name="decena">Decena de 01 (primera decena) a 36 (última decena)</param>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> BalanceHdricoNacionalDocumento_Async (string anio, string decena)
        {
             ApiResponse<Model200> localVarResponse = await BalanceHdricoNacionalDocumento_AsyncWithHttpInfo(anio, decena);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Balance hídrico nacional (documento). Se obtiene, para la decema y el año pasados por parámetro, el Boletín Hídrico Nacional que se elabora cada diez días. Se presenta información resumida de forma distribuida para todo el territorio nacional de diferentes variables, en las que se incluye informaciones de la precipitación y la evapotranspiración potencial acumuladas desde el 1 de septiembre.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anio">Año (AAAA)</param>
        /// <param name="decena">Decena de 01 (primera decena) a 36 (última decena)</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model200>> BalanceHdricoNacionalDocumento_AsyncWithHttpInfo (string anio, string decena)
        {
            // verify the required parameter 'anio' is set
            if (anio == null)
                throw new ApiException(400, "Missing required parameter 'anio' when calling ProductosClimatologicosApi->BalanceHdricoNacionalDocumento_");
            // verify the required parameter 'decena' is set
            if (decena == null)
                throw new ApiException(400, "Missing required parameter 'decena' when calling ProductosClimatologicosApi->BalanceHdricoNacionalDocumento_");

            var localVarPath = "/api/productos/climatologicos/balancehidrico/{anio}/{decena}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (anio != null) localVarPathParams.Add("anio", this.Configuration.ApiClient.ParameterToString(anio)); // path parameter
            if (decena != null) localVarPathParams.Add("decena", this.Configuration.ApiClient.ParameterToString(decena)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BalanceHdricoNacionalDocumento_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Capas SHAPE de estaciones climatológicas de AEMET. Capas SHAPE de las distintas estaciones climatológicas de AEMET: automáticas, completas, pluviométricas y termométricas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoestacion"> | Código | Tipo de Estación | |- -- -- -- -- -|- -- -- -- -- -| | automaticas  | Estaciones Automáticas   | | completas  | Estaciones Completas   | | pluviometricas  | Estaciones Pluviométricas   | | termometricas  | Estaciones Termométricas   </param>
        /// <returns>Model200</returns>
        public Model200 CapasSHAPEDeEstacionesClimatolgicas_ (string tipoestacion)
        {
             ApiResponse<Model200> localVarResponse = CapasSHAPEDeEstacionesClimatolgicas_WithHttpInfo(tipoestacion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Capas SHAPE de estaciones climatológicas de AEMET. Capas SHAPE de las distintas estaciones climatológicas de AEMET: automáticas, completas, pluviométricas y termométricas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoestacion"> | Código | Tipo de Estación | |- -- -- -- -- -|- -- -- -- -- -| | automaticas  | Estaciones Automáticas   | | completas  | Estaciones Completas   | | pluviometricas  | Estaciones Pluviométricas   | | termometricas  | Estaciones Termométricas   </param>
        /// <returns>ApiResponse of Model200</returns>
        public ApiResponse< Model200 > CapasSHAPEDeEstacionesClimatolgicas_WithHttpInfo (string tipoestacion)
        {
            // verify the required parameter 'tipoestacion' is set
            if (tipoestacion == null)
                throw new ApiException(400, "Missing required parameter 'tipoestacion' when calling ProductosClimatologicosApi->CapasSHAPEDeEstacionesClimatolgicas_");

            var localVarPath = "/api/productos/climatologicos/capasshape/{tipoestacion}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tipoestacion != null) localVarPathParams.Add("tipoestacion", this.Configuration.ApiClient.ParameterToString(tipoestacion)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CapasSHAPEDeEstacionesClimatolgicas_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Capas SHAPE de estaciones climatológicas de AEMET. Capas SHAPE de las distintas estaciones climatológicas de AEMET: automáticas, completas, pluviométricas y termométricas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoestacion"> | Código | Tipo de Estación | |- -- -- -- -- -|- -- -- -- -- -| | automaticas  | Estaciones Automáticas   | | completas  | Estaciones Completas   | | pluviometricas  | Estaciones Pluviométricas   | | termometricas  | Estaciones Termométricas   </param>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> CapasSHAPEDeEstacionesClimatolgicas_Async (string tipoestacion)
        {
             ApiResponse<Model200> localVarResponse = await CapasSHAPEDeEstacionesClimatolgicas_AsyncWithHttpInfo(tipoestacion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Capas SHAPE de estaciones climatológicas de AEMET. Capas SHAPE de las distintas estaciones climatológicas de AEMET: automáticas, completas, pluviométricas y termométricas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoestacion"> | Código | Tipo de Estación | |- -- -- -- -- -|- -- -- -- -- -| | automaticas  | Estaciones Automáticas   | | completas  | Estaciones Completas   | | pluviometricas  | Estaciones Pluviométricas   | | termometricas  | Estaciones Termométricas   </param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model200>> CapasSHAPEDeEstacionesClimatolgicas_AsyncWithHttpInfo (string tipoestacion)
        {
            // verify the required parameter 'tipoestacion' is set
            if (tipoestacion == null)
                throw new ApiException(400, "Missing required parameter 'tipoestacion' when calling ProductosClimatologicosApi->CapasSHAPEDeEstacionesClimatolgicas_");

            var localVarPath = "/api/productos/climatologicos/capasshape/{tipoestacion}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tipoestacion != null) localVarPathParams.Add("tipoestacion", this.Configuration.ApiClient.ParameterToString(tipoestacion)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CapasSHAPEDeEstacionesClimatolgicas_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Resumen mensual climatológico nacional (documento). Resumen climatológico nacional, para el año y mes pasado por parámetro, sobre el estado del clima y la evolución de las principales variables climáticas, en especial temperatura y precipitación, a nivel mensual, estacional y anual.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anio">Año (AAAA)</param>
        /// <param name="mes">Mes (mm)</param>
        /// <returns>Model200</returns>
        public Model200 ResumenMensualClimatolgicoNacionalDocumento_ (string anio, string mes)
        {
             ApiResponse<Model200> localVarResponse = ResumenMensualClimatolgicoNacionalDocumento_WithHttpInfo(anio, mes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Resumen mensual climatológico nacional (documento). Resumen climatológico nacional, para el año y mes pasado por parámetro, sobre el estado del clima y la evolución de las principales variables climáticas, en especial temperatura y precipitación, a nivel mensual, estacional y anual.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anio">Año (AAAA)</param>
        /// <param name="mes">Mes (mm)</param>
        /// <returns>ApiResponse of Model200</returns>
        public ApiResponse< Model200 > ResumenMensualClimatolgicoNacionalDocumento_WithHttpInfo (string anio, string mes)
        {
            // verify the required parameter 'anio' is set
            if (anio == null)
                throw new ApiException(400, "Missing required parameter 'anio' when calling ProductosClimatologicosApi->ResumenMensualClimatolgicoNacionalDocumento_");
            // verify the required parameter 'mes' is set
            if (mes == null)
                throw new ApiException(400, "Missing required parameter 'mes' when calling ProductosClimatologicosApi->ResumenMensualClimatolgicoNacionalDocumento_");

            var localVarPath = "/api/productos/climatologicos/resumenclimatologico/nacional/{anio}/{mes}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (anio != null) localVarPathParams.Add("anio", this.Configuration.ApiClient.ParameterToString(anio)); // path parameter
            if (mes != null) localVarPathParams.Add("mes", this.Configuration.ApiClient.ParameterToString(mes)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResumenMensualClimatolgicoNacionalDocumento_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Resumen mensual climatológico nacional (documento). Resumen climatológico nacional, para el año y mes pasado por parámetro, sobre el estado del clima y la evolución de las principales variables climáticas, en especial temperatura y precipitación, a nivel mensual, estacional y anual.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anio">Año (AAAA)</param>
        /// <param name="mes">Mes (mm)</param>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> ResumenMensualClimatolgicoNacionalDocumento_Async (string anio, string mes)
        {
             ApiResponse<Model200> localVarResponse = await ResumenMensualClimatolgicoNacionalDocumento_AsyncWithHttpInfo(anio, mes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Resumen mensual climatológico nacional (documento). Resumen climatológico nacional, para el año y mes pasado por parámetro, sobre el estado del clima y la evolución de las principales variables climáticas, en especial temperatura y precipitación, a nivel mensual, estacional y anual.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anio">Año (AAAA)</param>
        /// <param name="mes">Mes (mm)</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model200>> ResumenMensualClimatolgicoNacionalDocumento_AsyncWithHttpInfo (string anio, string mes)
        {
            // verify the required parameter 'anio' is set
            if (anio == null)
                throw new ApiException(400, "Missing required parameter 'anio' when calling ProductosClimatologicosApi->ResumenMensualClimatolgicoNacionalDocumento_");
            // verify the required parameter 'mes' is set
            if (mes == null)
                throw new ApiException(400, "Missing required parameter 'mes' when calling ProductosClimatologicosApi->ResumenMensualClimatolgicoNacionalDocumento_");

            var localVarPath = "/api/productos/climatologicos/resumenclimatologico/nacional/{anio}/{mes}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (anio != null) localVarPathParams.Add("anio", this.Configuration.ApiClient.ParameterToString(anio)); // path parameter
            if (mes != null) localVarPathParams.Add("mes", this.Configuration.ApiClient.ParameterToString(mes)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResumenMensualClimatolgicoNacionalDocumento_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

    }
}
