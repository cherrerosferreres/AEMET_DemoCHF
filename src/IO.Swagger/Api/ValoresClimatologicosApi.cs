/* 
 * AEMET OpenData
 *
 * AEMET OpenData es una API REST desarrollado por AEMET que permite la difusión y la reutilización de la información meteorológica y climatológica de la Agencia, en el sentido indicado en la Ley 18/2015, de 9 de julio, por la que se modifica la Ley 37/2007, de 16 de noviembre, sobre reutilización de la información del sector público. (IMPORTANTE: Para poder realizar peticiones, es necesario introducir en API Key haciendo clic en el círculo rojo de recurso REST).
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IValoresClimatologicosApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Climatologías diarias.
        /// </summary>
        /// <remarks>
        /// Valores climatológicos de todas las estaciones para el rango de fechas seleccionado. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fechaIniStr">Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="fechaFinStr">Fecha Final (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <returns>Model200</returns>
        Model200 ClimatologasDiarias1 (string fechaIniStr, string fechaFinStr);

        /// <summary>
        /// Climatologías diarias.
        /// </summary>
        /// <remarks>
        /// Valores climatológicos de todas las estaciones para el rango de fechas seleccionado. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fechaIniStr">Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="fechaFinStr">Fecha Final (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> ClimatologasDiarias1WithHttpInfo (string fechaIniStr, string fechaFinStr);
        /// <summary>
        /// Climatologías diarias.
        /// </summary>
        /// <remarks>
        /// Valores climatológicos para el rango de fechas y la estación seleccionada. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fechaIniStr">Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="fechaFinStr">Fecha Final (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="idema">Indicativo climatológico de la EMA. Puede introducir varios indicativos separados por comas (,)</param>
        /// <returns>Model200</returns>
        Model200 ClimatologasDiarias_ (string fechaIniStr, string fechaFinStr, string idema);

        /// <summary>
        /// Climatologías diarias.
        /// </summary>
        /// <remarks>
        /// Valores climatológicos para el rango de fechas y la estación seleccionada. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fechaIniStr">Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="fechaFinStr">Fecha Final (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="idema">Indicativo climatológico de la EMA. Puede introducir varios indicativos separados por comas (,)</param>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> ClimatologasDiarias_WithHttpInfo (string fechaIniStr, string fechaFinStr, string idema);
        /// <summary>
        /// Climatologías mensuales anuales.
        /// </summary>
        /// <remarks>
        /// Valores medios mensuales y anuales de los datos climatológicos para la estación y el periodo de años pasados por parámetro. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anioIniStr">Año Inicial (AAAA)</param>
        /// <param name="anioFinStr">Año Final (AAAA)</param>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>Model200</returns>
        Model200 ClimatologasMensualesAnuales_ (string anioIniStr, string anioFinStr, string idema);

        /// <summary>
        /// Climatologías mensuales anuales.
        /// </summary>
        /// <remarks>
        /// Valores medios mensuales y anuales de los datos climatológicos para la estación y el periodo de años pasados por parámetro. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anioIniStr">Año Inicial (AAAA)</param>
        /// <param name="anioFinStr">Año Final (AAAA)</param>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> ClimatologasMensualesAnuales_WithHttpInfo (string anioIniStr, string anioFinStr, string idema);
        /// <summary>
        /// Climatologías normales (1981-2010).
        /// </summary>
        /// <remarks>
        /// Valores climatológicos normales (periodo 1981-2010) para la estación pasada por parámetro. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>Model200</returns>
        Model200 ClimatologasNormales19812010_ (string idema);

        /// <summary>
        /// Climatologías normales (1981-2010).
        /// </summary>
        /// <remarks>
        /// Valores climatológicos normales (periodo 1981-2010) para la estación pasada por parámetro. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> ClimatologasNormales19812010_WithHttpInfo (string idema);
        /// <summary>
        /// Estaciones por indicativo.
        /// </summary>
        /// <remarks>
        /// Características de la estación climatológica pasada por parámetro.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estaciones">Listado de indicativos climatológicos (id1,id2,id3,...,idn)</param>
        /// <returns>Model200</returns>
        Model200 EstacionesPorIndicativo_ (string estaciones);

        /// <summary>
        /// Estaciones por indicativo.
        /// </summary>
        /// <remarks>
        /// Características de la estación climatológica pasada por parámetro.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estaciones">Listado de indicativos climatológicos (id1,id2,id3,...,idn)</param>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> EstacionesPorIndicativo_WithHttpInfo (string estaciones);
        /// <summary>
        /// Inventario de estaciones (valores climatológicos).
        /// </summary>
        /// <remarks>
        /// Inventario con las características de todas las estaciones climatológicas. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Model200</returns>
        Model200 InventarioDeEstacionesValoresClimatolgicos_ ();

        /// <summary>
        /// Inventario de estaciones (valores climatológicos).
        /// </summary>
        /// <remarks>
        /// Inventario con las características de todas las estaciones climatológicas. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> InventarioDeEstacionesValoresClimatolgicos_WithHttpInfo ();
        /// <summary>
        /// Valores extremos.
        /// </summary>
        /// <remarks>
        /// Valores extremos para la estación y la variable (precipitación, temperatura y viento) pasadas por parámetro. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parametro"> | Código | Parámetro Meteorológico | |- -- -- -- -- -|- -- -- -- -- -| | P  | Precipitación   | | T  | Temperatura   | | V  | Viento </param>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>Model200</returns>
        Model200 ValoresExtremos_ (string parametro, string idema);

        /// <summary>
        /// Valores extremos.
        /// </summary>
        /// <remarks>
        /// Valores extremos para la estación y la variable (precipitación, temperatura y viento) pasadas por parámetro. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parametro"> | Código | Parámetro Meteorológico | |- -- -- -- -- -|- -- -- -- -- -| | P  | Precipitación   | | T  | Temperatura   | | V  | Viento </param>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> ValoresExtremos_WithHttpInfo (string parametro, string idema);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Climatologías diarias.
        /// </summary>
        /// <remarks>
        /// Valores climatológicos de todas las estaciones para el rango de fechas seleccionado. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fechaIniStr">Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="fechaFinStr">Fecha Final (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> ClimatologasDiarias1Async (string fechaIniStr, string fechaFinStr);

        /// <summary>
        /// Climatologías diarias.
        /// </summary>
        /// <remarks>
        /// Valores climatológicos de todas las estaciones para el rango de fechas seleccionado. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fechaIniStr">Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="fechaFinStr">Fecha Final (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> ClimatologasDiarias1AsyncWithHttpInfo (string fechaIniStr, string fechaFinStr);
        /// <summary>
        /// Climatologías diarias.
        /// </summary>
        /// <remarks>
        /// Valores climatológicos para el rango de fechas y la estación seleccionada. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fechaIniStr">Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="fechaFinStr">Fecha Final (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="idema">Indicativo climatológico de la EMA. Puede introducir varios indicativos separados por comas (,)</param>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> ClimatologasDiarias_Async (string fechaIniStr, string fechaFinStr, string idema);

        /// <summary>
        /// Climatologías diarias.
        /// </summary>
        /// <remarks>
        /// Valores climatológicos para el rango de fechas y la estación seleccionada. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fechaIniStr">Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="fechaFinStr">Fecha Final (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="idema">Indicativo climatológico de la EMA. Puede introducir varios indicativos separados por comas (,)</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> ClimatologasDiarias_AsyncWithHttpInfo (string fechaIniStr, string fechaFinStr, string idema);
        /// <summary>
        /// Climatologías mensuales anuales.
        /// </summary>
        /// <remarks>
        /// Valores medios mensuales y anuales de los datos climatológicos para la estación y el periodo de años pasados por parámetro. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anioIniStr">Año Inicial (AAAA)</param>
        /// <param name="anioFinStr">Año Final (AAAA)</param>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> ClimatologasMensualesAnuales_Async (string anioIniStr, string anioFinStr, string idema);

        /// <summary>
        /// Climatologías mensuales anuales.
        /// </summary>
        /// <remarks>
        /// Valores medios mensuales y anuales de los datos climatológicos para la estación y el periodo de años pasados por parámetro. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anioIniStr">Año Inicial (AAAA)</param>
        /// <param name="anioFinStr">Año Final (AAAA)</param>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> ClimatologasMensualesAnuales_AsyncWithHttpInfo (string anioIniStr, string anioFinStr, string idema);
        /// <summary>
        /// Climatologías normales (1981-2010).
        /// </summary>
        /// <remarks>
        /// Valores climatológicos normales (periodo 1981-2010) para la estación pasada por parámetro. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> ClimatologasNormales19812010_Async (string idema);

        /// <summary>
        /// Climatologías normales (1981-2010).
        /// </summary>
        /// <remarks>
        /// Valores climatológicos normales (periodo 1981-2010) para la estación pasada por parámetro. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> ClimatologasNormales19812010_AsyncWithHttpInfo (string idema);
        /// <summary>
        /// Estaciones por indicativo.
        /// </summary>
        /// <remarks>
        /// Características de la estación climatológica pasada por parámetro.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estaciones">Listado de indicativos climatológicos (id1,id2,id3,...,idn)</param>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> EstacionesPorIndicativo_Async (string estaciones);

        /// <summary>
        /// Estaciones por indicativo.
        /// </summary>
        /// <remarks>
        /// Características de la estación climatológica pasada por parámetro.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estaciones">Listado de indicativos climatológicos (id1,id2,id3,...,idn)</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> EstacionesPorIndicativo_AsyncWithHttpInfo (string estaciones);
        /// <summary>
        /// Inventario de estaciones (valores climatológicos).
        /// </summary>
        /// <remarks>
        /// Inventario con las características de todas las estaciones climatológicas. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> InventarioDeEstacionesValoresClimatolgicos_Async ();

        /// <summary>
        /// Inventario de estaciones (valores climatológicos).
        /// </summary>
        /// <remarks>
        /// Inventario con las características de todas las estaciones climatológicas. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> InventarioDeEstacionesValoresClimatolgicos_AsyncWithHttpInfo ();
        /// <summary>
        /// Valores extremos.
        /// </summary>
        /// <remarks>
        /// Valores extremos para la estación y la variable (precipitación, temperatura y viento) pasadas por parámetro. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parametro"> | Código | Parámetro Meteorológico | |- -- -- -- -- -|- -- -- -- -- -| | P  | Precipitación   | | T  | Temperatura   | | V  | Viento </param>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> ValoresExtremos_Async (string parametro, string idema);

        /// <summary>
        /// Valores extremos.
        /// </summary>
        /// <remarks>
        /// Valores extremos para la estación y la variable (precipitación, temperatura y viento) pasadas por parámetro. Periodicidad: 1 vez al día.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parametro"> | Código | Parámetro Meteorológico | |- -- -- -- -- -|- -- -- -- -- -| | P  | Precipitación   | | T  | Temperatura   | | V  | Viento </param>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> ValoresExtremos_AsyncWithHttpInfo (string parametro, string idema);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ValoresClimatologicosApi : IValoresClimatologicosApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ValoresClimatologicosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ValoresClimatologicosApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ValoresClimatologicosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ValoresClimatologicosApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Climatologías diarias. Valores climatológicos de todas las estaciones para el rango de fechas seleccionado. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fechaIniStr">Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="fechaFinStr">Fecha Final (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <returns>Model200</returns>
        public Model200 ClimatologasDiarias1 (string fechaIniStr, string fechaFinStr)
        {
             ApiResponse<Model200> localVarResponse = ClimatologasDiarias1WithHttpInfo(fechaIniStr, fechaFinStr);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Climatologías diarias. Valores climatológicos de todas las estaciones para el rango de fechas seleccionado. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fechaIniStr">Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="fechaFinStr">Fecha Final (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <returns>ApiResponse of Model200</returns>
        public ApiResponse< Model200 > ClimatologasDiarias1WithHttpInfo (string fechaIniStr, string fechaFinStr)
        {
            // verify the required parameter 'fechaIniStr' is set
            if (fechaIniStr == null)
                throw new ApiException(400, "Missing required parameter 'fechaIniStr' when calling ValoresClimatologicosApi->ClimatologasDiarias1");
            // verify the required parameter 'fechaFinStr' is set
            if (fechaFinStr == null)
                throw new ApiException(400, "Missing required parameter 'fechaFinStr' when calling ValoresClimatologicosApi->ClimatologasDiarias1");

            var localVarPath = "/api/valores/climatologicos/diarios/datos/fechaini/{fechaIniStr}/fechafin/{fechaFinStr}/todasestaciones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fechaIniStr != null) localVarPathParams.Add("fechaIniStr", this.Configuration.ApiClient.ParameterToString(fechaIniStr)); // path parameter
            if (fechaFinStr != null) localVarPathParams.Add("fechaFinStr", this.Configuration.ApiClient.ParameterToString(fechaFinStr)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClimatologasDiarias1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Climatologías diarias. Valores climatológicos de todas las estaciones para el rango de fechas seleccionado. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fechaIniStr">Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="fechaFinStr">Fecha Final (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> ClimatologasDiarias1Async (string fechaIniStr, string fechaFinStr)
        {
             ApiResponse<Model200> localVarResponse = await ClimatologasDiarias1AsyncWithHttpInfo(fechaIniStr, fechaFinStr);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Climatologías diarias. Valores climatológicos de todas las estaciones para el rango de fechas seleccionado. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fechaIniStr">Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="fechaFinStr">Fecha Final (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model200>> ClimatologasDiarias1AsyncWithHttpInfo (string fechaIniStr, string fechaFinStr)
        {
            // verify the required parameter 'fechaIniStr' is set
            if (fechaIniStr == null)
                throw new ApiException(400, "Missing required parameter 'fechaIniStr' when calling ValoresClimatologicosApi->ClimatologasDiarias1");
            // verify the required parameter 'fechaFinStr' is set
            if (fechaFinStr == null)
                throw new ApiException(400, "Missing required parameter 'fechaFinStr' when calling ValoresClimatologicosApi->ClimatologasDiarias1");

            var localVarPath = "/api/valores/climatologicos/diarios/datos/fechaini/{fechaIniStr}/fechafin/{fechaFinStr}/todasestaciones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fechaIniStr != null) localVarPathParams.Add("fechaIniStr", this.Configuration.ApiClient.ParameterToString(fechaIniStr)); // path parameter
            if (fechaFinStr != null) localVarPathParams.Add("fechaFinStr", this.Configuration.ApiClient.ParameterToString(fechaFinStr)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClimatologasDiarias1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Climatologías diarias. Valores climatológicos para el rango de fechas y la estación seleccionada. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fechaIniStr">Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="fechaFinStr">Fecha Final (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="idema">Indicativo climatológico de la EMA. Puede introducir varios indicativos separados por comas (,)</param>
        /// <returns>Model200</returns>
        public Model200 ClimatologasDiarias_ (string fechaIniStr, string fechaFinStr, string idema)
        {
             ApiResponse<Model200> localVarResponse = ClimatologasDiarias_WithHttpInfo(fechaIniStr, fechaFinStr, idema);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Climatologías diarias. Valores climatológicos para el rango de fechas y la estación seleccionada. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fechaIniStr">Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="fechaFinStr">Fecha Final (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="idema">Indicativo climatológico de la EMA. Puede introducir varios indicativos separados por comas (,)</param>
        /// <returns>ApiResponse of Model200</returns>
        public ApiResponse< Model200 > ClimatologasDiarias_WithHttpInfo (string fechaIniStr, string fechaFinStr, string idema)
        {
            // verify the required parameter 'fechaIniStr' is set
            if (fechaIniStr == null)
                throw new ApiException(400, "Missing required parameter 'fechaIniStr' when calling ValoresClimatologicosApi->ClimatologasDiarias_");
            // verify the required parameter 'fechaFinStr' is set
            if (fechaFinStr == null)
                throw new ApiException(400, "Missing required parameter 'fechaFinStr' when calling ValoresClimatologicosApi->ClimatologasDiarias_");
            // verify the required parameter 'idema' is set
            if (idema == null)
                throw new ApiException(400, "Missing required parameter 'idema' when calling ValoresClimatologicosApi->ClimatologasDiarias_");

            var localVarPath = "/api/valores/climatologicos/diarios/datos/fechaini/{fechaIniStr}/fechafin/{fechaFinStr}/estacion/{idema}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fechaIniStr != null) localVarPathParams.Add("fechaIniStr", this.Configuration.ApiClient.ParameterToString(fechaIniStr)); // path parameter
            if (fechaFinStr != null) localVarPathParams.Add("fechaFinStr", this.Configuration.ApiClient.ParameterToString(fechaFinStr)); // path parameter
            if (idema != null) localVarPathParams.Add("idema", this.Configuration.ApiClient.ParameterToString(idema)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClimatologasDiarias_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Climatologías diarias. Valores climatológicos para el rango de fechas y la estación seleccionada. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fechaIniStr">Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="fechaFinStr">Fecha Final (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="idema">Indicativo climatológico de la EMA. Puede introducir varios indicativos separados por comas (,)</param>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> ClimatologasDiarias_Async (string fechaIniStr, string fechaFinStr, string idema)
        {
             ApiResponse<Model200> localVarResponse = await ClimatologasDiarias_AsyncWithHttpInfo(fechaIniStr, fechaFinStr, idema);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Climatologías diarias. Valores climatológicos para el rango de fechas y la estación seleccionada. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fechaIniStr">Fecha Inicial (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="fechaFinStr">Fecha Final (AAAA-MM-DDTHH:MM:SSUTC)</param>
        /// <param name="idema">Indicativo climatológico de la EMA. Puede introducir varios indicativos separados por comas (,)</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model200>> ClimatologasDiarias_AsyncWithHttpInfo (string fechaIniStr, string fechaFinStr, string idema)
        {
            // verify the required parameter 'fechaIniStr' is set
            if (fechaIniStr == null)
                throw new ApiException(400, "Missing required parameter 'fechaIniStr' when calling ValoresClimatologicosApi->ClimatologasDiarias_");
            // verify the required parameter 'fechaFinStr' is set
            if (fechaFinStr == null)
                throw new ApiException(400, "Missing required parameter 'fechaFinStr' when calling ValoresClimatologicosApi->ClimatologasDiarias_");
            // verify the required parameter 'idema' is set
            if (idema == null)
                throw new ApiException(400, "Missing required parameter 'idema' when calling ValoresClimatologicosApi->ClimatologasDiarias_");

            var localVarPath = "/api/valores/climatologicos/diarios/datos/fechaini/{fechaIniStr}/fechafin/{fechaFinStr}/estacion/{idema}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fechaIniStr != null) localVarPathParams.Add("fechaIniStr", this.Configuration.ApiClient.ParameterToString(fechaIniStr)); // path parameter
            if (fechaFinStr != null) localVarPathParams.Add("fechaFinStr", this.Configuration.ApiClient.ParameterToString(fechaFinStr)); // path parameter
            if (idema != null) localVarPathParams.Add("idema", this.Configuration.ApiClient.ParameterToString(idema)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClimatologasDiarias_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Climatologías mensuales anuales. Valores medios mensuales y anuales de los datos climatológicos para la estación y el periodo de años pasados por parámetro. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anioIniStr">Año Inicial (AAAA)</param>
        /// <param name="anioFinStr">Año Final (AAAA)</param>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>Model200</returns>
        public Model200 ClimatologasMensualesAnuales_ (string anioIniStr, string anioFinStr, string idema)
        {
             ApiResponse<Model200> localVarResponse = ClimatologasMensualesAnuales_WithHttpInfo(anioIniStr, anioFinStr, idema);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Climatologías mensuales anuales. Valores medios mensuales y anuales de los datos climatológicos para la estación y el periodo de años pasados por parámetro. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anioIniStr">Año Inicial (AAAA)</param>
        /// <param name="anioFinStr">Año Final (AAAA)</param>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>ApiResponse of Model200</returns>
        public ApiResponse< Model200 > ClimatologasMensualesAnuales_WithHttpInfo (string anioIniStr, string anioFinStr, string idema)
        {
            // verify the required parameter 'anioIniStr' is set
            if (anioIniStr == null)
                throw new ApiException(400, "Missing required parameter 'anioIniStr' when calling ValoresClimatologicosApi->ClimatologasMensualesAnuales_");
            // verify the required parameter 'anioFinStr' is set
            if (anioFinStr == null)
                throw new ApiException(400, "Missing required parameter 'anioFinStr' when calling ValoresClimatologicosApi->ClimatologasMensualesAnuales_");
            // verify the required parameter 'idema' is set
            if (idema == null)
                throw new ApiException(400, "Missing required parameter 'idema' when calling ValoresClimatologicosApi->ClimatologasMensualesAnuales_");

            var localVarPath = "/api/valores/climatologicos/mensualesanuales/datos/anioini/{anioIniStr}/aniofin/{anioFinStr}/estacion/{idema}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (anioIniStr != null) localVarPathParams.Add("anioIniStr", this.Configuration.ApiClient.ParameterToString(anioIniStr)); // path parameter
            if (anioFinStr != null) localVarPathParams.Add("anioFinStr", this.Configuration.ApiClient.ParameterToString(anioFinStr)); // path parameter
            if (idema != null) localVarPathParams.Add("idema", this.Configuration.ApiClient.ParameterToString(idema)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClimatologasMensualesAnuales_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Climatologías mensuales anuales. Valores medios mensuales y anuales de los datos climatológicos para la estación y el periodo de años pasados por parámetro. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anioIniStr">Año Inicial (AAAA)</param>
        /// <param name="anioFinStr">Año Final (AAAA)</param>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> ClimatologasMensualesAnuales_Async (string anioIniStr, string anioFinStr, string idema)
        {
             ApiResponse<Model200> localVarResponse = await ClimatologasMensualesAnuales_AsyncWithHttpInfo(anioIniStr, anioFinStr, idema);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Climatologías mensuales anuales. Valores medios mensuales y anuales de los datos climatológicos para la estación y el periodo de años pasados por parámetro. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anioIniStr">Año Inicial (AAAA)</param>
        /// <param name="anioFinStr">Año Final (AAAA)</param>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model200>> ClimatologasMensualesAnuales_AsyncWithHttpInfo (string anioIniStr, string anioFinStr, string idema)
        {
            // verify the required parameter 'anioIniStr' is set
            if (anioIniStr == null)
                throw new ApiException(400, "Missing required parameter 'anioIniStr' when calling ValoresClimatologicosApi->ClimatologasMensualesAnuales_");
            // verify the required parameter 'anioFinStr' is set
            if (anioFinStr == null)
                throw new ApiException(400, "Missing required parameter 'anioFinStr' when calling ValoresClimatologicosApi->ClimatologasMensualesAnuales_");
            // verify the required parameter 'idema' is set
            if (idema == null)
                throw new ApiException(400, "Missing required parameter 'idema' when calling ValoresClimatologicosApi->ClimatologasMensualesAnuales_");

            var localVarPath = "/api/valores/climatologicos/mensualesanuales/datos/anioini/{anioIniStr}/aniofin/{anioFinStr}/estacion/{idema}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (anioIniStr != null) localVarPathParams.Add("anioIniStr", this.Configuration.ApiClient.ParameterToString(anioIniStr)); // path parameter
            if (anioFinStr != null) localVarPathParams.Add("anioFinStr", this.Configuration.ApiClient.ParameterToString(anioFinStr)); // path parameter
            if (idema != null) localVarPathParams.Add("idema", this.Configuration.ApiClient.ParameterToString(idema)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClimatologasMensualesAnuales_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Climatologías normales (1981-2010). Valores climatológicos normales (periodo 1981-2010) para la estación pasada por parámetro. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>Model200</returns>
        public Model200 ClimatologasNormales19812010_ (string idema)
        {
             ApiResponse<Model200> localVarResponse = ClimatologasNormales19812010_WithHttpInfo(idema);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Climatologías normales (1981-2010). Valores climatológicos normales (periodo 1981-2010) para la estación pasada por parámetro. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>ApiResponse of Model200</returns>
        public ApiResponse< Model200 > ClimatologasNormales19812010_WithHttpInfo (string idema)
        {
            // verify the required parameter 'idema' is set
            if (idema == null)
                throw new ApiException(400, "Missing required parameter 'idema' when calling ValoresClimatologicosApi->ClimatologasNormales19812010_");

            var localVarPath = "/api/valores/climatologicos/normales/estacion/{idema}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idema != null) localVarPathParams.Add("idema", this.Configuration.ApiClient.ParameterToString(idema)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClimatologasNormales19812010_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Climatologías normales (1981-2010). Valores climatológicos normales (periodo 1981-2010) para la estación pasada por parámetro. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> ClimatologasNormales19812010_Async (string idema)
        {
             ApiResponse<Model200> localVarResponse = await ClimatologasNormales19812010_AsyncWithHttpInfo(idema);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Climatologías normales (1981-2010). Valores climatológicos normales (periodo 1981-2010) para la estación pasada por parámetro. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model200>> ClimatologasNormales19812010_AsyncWithHttpInfo (string idema)
        {
            // verify the required parameter 'idema' is set
            if (idema == null)
                throw new ApiException(400, "Missing required parameter 'idema' when calling ValoresClimatologicosApi->ClimatologasNormales19812010_");

            var localVarPath = "/api/valores/climatologicos/normales/estacion/{idema}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idema != null) localVarPathParams.Add("idema", this.Configuration.ApiClient.ParameterToString(idema)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClimatologasNormales19812010_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Estaciones por indicativo. Características de la estación climatológica pasada por parámetro.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estaciones">Listado de indicativos climatológicos (id1,id2,id3,...,idn)</param>
        /// <returns>Model200</returns>
        public Model200 EstacionesPorIndicativo_ (string estaciones)
        {
             ApiResponse<Model200> localVarResponse = EstacionesPorIndicativo_WithHttpInfo(estaciones);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Estaciones por indicativo. Características de la estación climatológica pasada por parámetro.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estaciones">Listado de indicativos climatológicos (id1,id2,id3,...,idn)</param>
        /// <returns>ApiResponse of Model200</returns>
        public ApiResponse< Model200 > EstacionesPorIndicativo_WithHttpInfo (string estaciones)
        {
            // verify the required parameter 'estaciones' is set
            if (estaciones == null)
                throw new ApiException(400, "Missing required parameter 'estaciones' when calling ValoresClimatologicosApi->EstacionesPorIndicativo_");

            var localVarPath = "/api/valores/climatologicos/inventarioestaciones/estaciones/{estaciones}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (estaciones != null) localVarPathParams.Add("estaciones", this.Configuration.ApiClient.ParameterToString(estaciones)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EstacionesPorIndicativo_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Estaciones por indicativo. Características de la estación climatológica pasada por parámetro.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estaciones">Listado de indicativos climatológicos (id1,id2,id3,...,idn)</param>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> EstacionesPorIndicativo_Async (string estaciones)
        {
             ApiResponse<Model200> localVarResponse = await EstacionesPorIndicativo_AsyncWithHttpInfo(estaciones);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Estaciones por indicativo. Características de la estación climatológica pasada por parámetro.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estaciones">Listado de indicativos climatológicos (id1,id2,id3,...,idn)</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model200>> EstacionesPorIndicativo_AsyncWithHttpInfo (string estaciones)
        {
            // verify the required parameter 'estaciones' is set
            if (estaciones == null)
                throw new ApiException(400, "Missing required parameter 'estaciones' when calling ValoresClimatologicosApi->EstacionesPorIndicativo_");

            var localVarPath = "/api/valores/climatologicos/inventarioestaciones/estaciones/{estaciones}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (estaciones != null) localVarPathParams.Add("estaciones", this.Configuration.ApiClient.ParameterToString(estaciones)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EstacionesPorIndicativo_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Inventario de estaciones (valores climatológicos). Inventario con las características de todas las estaciones climatológicas. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Model200</returns>
        public Model200 InventarioDeEstacionesValoresClimatolgicos_ ()
        {
             ApiResponse<Model200> localVarResponse = InventarioDeEstacionesValoresClimatolgicos_WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Inventario de estaciones (valores climatológicos). Inventario con las características de todas las estaciones climatológicas. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Model200</returns>
        public ApiResponse< Model200 > InventarioDeEstacionesValoresClimatolgicos_WithHttpInfo ()
        {

            var localVarPath = "/api/valores/climatologicos/inventarioestaciones/todasestaciones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InventarioDeEstacionesValoresClimatolgicos_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Inventario de estaciones (valores climatológicos). Inventario con las características de todas las estaciones climatológicas. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> InventarioDeEstacionesValoresClimatolgicos_Async ()
        {
             ApiResponse<Model200> localVarResponse = await InventarioDeEstacionesValoresClimatolgicos_AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Inventario de estaciones (valores climatológicos). Inventario con las características de todas las estaciones climatológicas. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model200>> InventarioDeEstacionesValoresClimatolgicos_AsyncWithHttpInfo ()
        {

            var localVarPath = "/api/valores/climatologicos/inventarioestaciones/todasestaciones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InventarioDeEstacionesValoresClimatolgicos_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Valores extremos. Valores extremos para la estación y la variable (precipitación, temperatura y viento) pasadas por parámetro. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parametro"> | Código | Parámetro Meteorológico | |- -- -- -- -- -|- -- -- -- -- -| | P  | Precipitación   | | T  | Temperatura   | | V  | Viento </param>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>Model200</returns>
        public Model200 ValoresExtremos_ (string parametro, string idema)
        {
             ApiResponse<Model200> localVarResponse = ValoresExtremos_WithHttpInfo(parametro, idema);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Valores extremos. Valores extremos para la estación y la variable (precipitación, temperatura y viento) pasadas por parámetro. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parametro"> | Código | Parámetro Meteorológico | |- -- -- -- -- -|- -- -- -- -- -| | P  | Precipitación   | | T  | Temperatura   | | V  | Viento </param>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>ApiResponse of Model200</returns>
        public ApiResponse< Model200 > ValoresExtremos_WithHttpInfo (string parametro, string idema)
        {
            // verify the required parameter 'parametro' is set
            if (parametro == null)
                throw new ApiException(400, "Missing required parameter 'parametro' when calling ValoresClimatologicosApi->ValoresExtremos_");
            // verify the required parameter 'idema' is set
            if (idema == null)
                throw new ApiException(400, "Missing required parameter 'idema' when calling ValoresClimatologicosApi->ValoresExtremos_");

            var localVarPath = "/api/valores/climatologicos/valoresextremos/parametro/{parametro}/estacion/{idema}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parametro != null) localVarPathParams.Add("parametro", this.Configuration.ApiClient.ParameterToString(parametro)); // path parameter
            if (idema != null) localVarPathParams.Add("idema", this.Configuration.ApiClient.ParameterToString(idema)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValoresExtremos_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Valores extremos. Valores extremos para la estación y la variable (precipitación, temperatura y viento) pasadas por parámetro. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parametro"> | Código | Parámetro Meteorológico | |- -- -- -- -- -|- -- -- -- -- -| | P  | Precipitación   | | T  | Temperatura   | | V  | Viento </param>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> ValoresExtremos_Async (string parametro, string idema)
        {
             ApiResponse<Model200> localVarResponse = await ValoresExtremos_AsyncWithHttpInfo(parametro, idema);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Valores extremos. Valores extremos para la estación y la variable (precipitación, temperatura y viento) pasadas por parámetro. Periodicidad: 1 vez al día.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parametro"> | Código | Parámetro Meteorológico | |- -- -- -- -- -|- -- -- -- -- -| | P  | Precipitación   | | T  | Temperatura   | | V  | Viento </param>
        /// <param name="idema">Indicativo climatológico de la EMA</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model200>> ValoresExtremos_AsyncWithHttpInfo (string parametro, string idema)
        {
            // verify the required parameter 'parametro' is set
            if (parametro == null)
                throw new ApiException(400, "Missing required parameter 'parametro' when calling ValoresClimatologicosApi->ValoresExtremos_");
            // verify the required parameter 'idema' is set
            if (idema == null)
                throw new ApiException(400, "Missing required parameter 'idema' when calling ValoresClimatologicosApi->ValoresExtremos_");

            var localVarPath = "/api/valores/climatologicos/valoresextremos/parametro/{parametro}/estacion/{idema}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parametro != null) localVarPathParams.Add("parametro", this.Configuration.ApiClient.ParameterToString(parametro)); // path parameter
            if (idema != null) localVarPathParams.Add("idema", this.Configuration.ApiClient.ParameterToString(idema)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValoresExtremos_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

    }
}
