/* 
 * AEMET OpenData
 *
 * AEMET OpenData es una API REST desarrollado por AEMET que permite la difusión y la reutilización de la información meteorológica y climatológica de la Agencia, en el sentido indicado en la Ley 18/2015, de 9 de julio, por la que se modifica la Ley 37/2007, de 16 de noviembre, sobre reutilización de la información del sector público. (IMPORTANTE: Para poder realizar peticiones, es necesario introducir en API Key haciendo clic en el círculo rojo de recurso REST).
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPrediccionesEspecificasApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Información nivológica.
        /// </summary>
        /// <remarks>
        /// Información nivológica para la zona montañosa que se pasa como parámetro (area).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de  Área Montañosa |  Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | 0 | Pirineo Catalán  | | 1  | Pirineo Navarro y Aragonés</param>
        /// <returns>Model200</returns>
        Model200 InformacionNivologica_ (string area);

        /// <summary>
        /// Información nivológica.
        /// </summary>
        /// <remarks>
        /// Información nivológica para la zona montañosa que se pasa como parámetro (area).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de  Área Montañosa |  Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | 0 | Pirineo Catalán  | | 1  | Pirineo Navarro y Aragonés</param>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> InformacionNivologica_WithHttpInfo (string area);
        /// <summary>
        /// Predicción de montaña. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Predicción meteorológica para la zona montañosa que se pasa como parámetro (area) con validez para el día (día).  Periodicidad de actualización: continuamente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de Área Montañosa | Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | peu1 | Picos de Europa   | | nav1  | Pirineo Navarro   | | arn1  | Pirineo Aragonés  | | cat1  | Pirineo Catalán   | | rio1  | Ibérica Riojana   | | arn2  | Ibérica Aragonesa   | | mad2  | Sierras de Guadarrama y Somosierra  | | gre1  | Sierra de Gredos   | | nev1  | Sierra Nevada</param>
        /// <param name="dia"> | Código de día | Día | |- -- -- -- -- -|- -- -- -- -- -| | 0 | día actual  | | 1  | d+1 (mañana)   | | 2  | d+2 (pasado mañana)  | | 3  | d+3 (siguente a pasado mañana)</param>
        /// <returns>Model200</returns>
        Model200 PrediccinDeMontaaTiempoActual_ (string area, string dia);

        /// <summary>
        /// Predicción de montaña. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Predicción meteorológica para la zona montañosa que se pasa como parámetro (area) con validez para el día (día).  Periodicidad de actualización: continuamente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de Área Montañosa | Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | peu1 | Picos de Europa   | | nav1  | Pirineo Navarro   | | arn1  | Pirineo Aragonés  | | cat1  | Pirineo Catalán   | | rio1  | Ibérica Riojana   | | arn2  | Ibérica Aragonesa   | | mad2  | Sierras de Guadarrama y Somosierra  | | gre1  | Sierra de Gredos   | | nev1  | Sierra Nevada</param>
        /// <param name="dia"> | Código de día | Día | |- -- -- -- -- -|- -- -- -- -- -| | 0 | día actual  | | 1  | d+1 (mañana)   | | 2  | d+2 (pasado mañana)  | | 3  | d+3 (siguente a pasado mañana)</param>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> PrediccinDeMontaaTiempoActual_WithHttpInfo (string area, string dia);
        /// <summary>
        /// Predicción de montaña. Tiempo pasado.
        /// </summary>
        /// <remarks>
        /// Breve resumen con lo más significativo de las condiciones meteorológicas registradas en la zona de montaña que se pasa como parámetro (area) en las últimas 24-36 horas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de Área Montañosa | Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | peu1 | Picos de Europa   | | nav1  | Pirineo Navarro   | | arn1  | Pirineo Aragonés  | | cat1  | Pirineo Catalán   | | rio1  | Ibérica Riojana   | | arn2  | Ibérica Aragonesa   | | mad2  | Sierras de Guadarrama y Somosierra  | | gre1  | Sierra de Gredos   | | nev1  | Sierra Nevada</param>
        /// <returns>Model200</returns>
        Model200 PrediccinDeMontaaTiempoPasado_ (string area);

        /// <summary>
        /// Predicción de montaña. Tiempo pasado.
        /// </summary>
        /// <remarks>
        /// Breve resumen con lo más significativo de las condiciones meteorológicas registradas en la zona de montaña que se pasa como parámetro (area) en las últimas 24-36 horas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de Área Montañosa | Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | peu1 | Picos de Europa   | | nav1  | Pirineo Navarro   | | arn1  | Pirineo Aragonés  | | cat1  | Pirineo Catalán   | | rio1  | Ibérica Riojana   | | arn2  | Ibérica Aragonesa   | | mad2  | Sierras de Guadarrama y Somosierra  | | gre1  | Sierra de Gredos   | | nev1  | Sierra Nevada</param>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> PrediccinDeMontaaTiempoPasado_WithHttpInfo (string area);
        /// <summary>
        /// Predicción de radiación ultravioleta (UVI).
        /// </summary>
        /// <remarks>
        ///  Predicción de Índice de radiación UV máximo en condiciones de cielo despejado para el día seleccionado.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dia"> | Código de día | Día | |- -- -- -- -- -|- -- -- -- -- -| | 0 | día actual  | | 1  | d+1 (mañana)   | | 2  | d+2 (pasado mañana)  | | 3  | d+3 (dentro de 3 días) | | 4  | d+4 (dentro de 4 días)</param>
        /// <returns>Model200</returns>
        Model200 PrediccinDeRadiacinUltravioletaUVI_ (string dia);

        /// <summary>
        /// Predicción de radiación ultravioleta (UVI).
        /// </summary>
        /// <remarks>
        ///  Predicción de Índice de radiación UV máximo en condiciones de cielo despejado para el día seleccionado.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dia"> | Código de día | Día | |- -- -- -- -- -|- -- -- -- -- -| | 0 | día actual  | | 1  | d+1 (mañana)   | | 2  | d+2 (pasado mañana)  | | 3  | d+3 (dentro de 3 días) | | 4  | d+4 (dentro de 4 días)</param>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> PrediccinDeRadiacinUltravioletaUVI_WithHttpInfo (string dia);
        /// <summary>
        /// Predicción para las playas. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// La predicción diaria de la playa que se pasa como parámetro. Establece el estado de nubosidad para unas horas determinadas, las 11 y las 17 hora oficial. Se analiza también si se espera precipitación en el entorno de esas horas, entre las 08 y las 14 horas y entre las 14 y 20 horas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playa">Código de playa   http://www.aemet.es/documentos/es/eltiempo/prediccion/playas/Playas_codigos.csv</param>
        /// <returns>Model200</returns>
        Model200 PrediccinParaLasPlayasTiempoActual_ (string playa);

        /// <summary>
        /// Predicción para las playas. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// La predicción diaria de la playa que se pasa como parámetro. Establece el estado de nubosidad para unas horas determinadas, las 11 y las 17 hora oficial. Se analiza también si se espera precipitación en el entorno de esas horas, entre las 08 y las 14 horas y entre las 14 y 20 horas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playa">Código de playa   http://www.aemet.es/documentos/es/eltiempo/prediccion/playas/Playas_codigos.csv</param>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> PrediccinParaLasPlayasTiempoActual_WithHttpInfo (string playa);
        /// <summary>
        /// Predicción por municipios diaria. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Predicción para el municipio que se pasa como parámetro (municipio). Periodicidad de actualización: continuamente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="municipio">Código de municipio   http://www.ine.es/daco/daco42/codmun/codmunmapa.htm</param>
        /// <returns>Model200</returns>
        Model200 PrediccinPorMunicipiosDiariaTiempoActual_ (string municipio);

        /// <summary>
        /// Predicción por municipios diaria. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Predicción para el municipio que se pasa como parámetro (municipio). Periodicidad de actualización: continuamente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="municipio">Código de municipio   http://www.ine.es/daco/daco42/codmun/codmunmapa.htm</param>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> PrediccinPorMunicipiosDiariaTiempoActual_WithHttpInfo (string municipio);
        /// <summary>
        /// Predicción por municipios horaria. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Predicción horaria para el municipio que se pasa como parámetro (municipio). Presenta la información de hora en hora hasta 48 horas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="municipio">Código de municipio  http://www.ine.es/daco/daco42/codmun/codmunmapa.htm</param>
        /// <returns>Model200</returns>
        Model200 PrediccinPorMunicipiosHorariaTiempoActual_ (string municipio);

        /// <summary>
        /// Predicción por municipios horaria. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Predicción horaria para el municipio que se pasa como parámetro (municipio). Presenta la información de hora en hora hasta 48 horas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="municipio">Código de municipio  http://www.ine.es/daco/daco42/codmun/codmunmapa.htm</param>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> PrediccinPorMunicipiosHorariaTiempoActual_WithHttpInfo (string municipio);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Información nivológica.
        /// </summary>
        /// <remarks>
        /// Información nivológica para la zona montañosa que se pasa como parámetro (area).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de  Área Montañosa |  Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | 0 | Pirineo Catalán  | | 1  | Pirineo Navarro y Aragonés</param>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> InformacionNivologica_Async (string area);

        /// <summary>
        /// Información nivológica.
        /// </summary>
        /// <remarks>
        /// Información nivológica para la zona montañosa que se pasa como parámetro (area).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de  Área Montañosa |  Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | 0 | Pirineo Catalán  | | 1  | Pirineo Navarro y Aragonés</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> InformacionNivologica_AsyncWithHttpInfo (string area);
        /// <summary>
        /// Predicción de montaña. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Predicción meteorológica para la zona montañosa que se pasa como parámetro (area) con validez para el día (día).  Periodicidad de actualización: continuamente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de Área Montañosa | Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | peu1 | Picos de Europa   | | nav1  | Pirineo Navarro   | | arn1  | Pirineo Aragonés  | | cat1  | Pirineo Catalán   | | rio1  | Ibérica Riojana   | | arn2  | Ibérica Aragonesa   | | mad2  | Sierras de Guadarrama y Somosierra  | | gre1  | Sierra de Gredos   | | nev1  | Sierra Nevada</param>
        /// <param name="dia"> | Código de día | Día | |- -- -- -- -- -|- -- -- -- -- -| | 0 | día actual  | | 1  | d+1 (mañana)   | | 2  | d+2 (pasado mañana)  | | 3  | d+3 (siguente a pasado mañana)</param>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> PrediccinDeMontaaTiempoActual_Async (string area, string dia);

        /// <summary>
        /// Predicción de montaña. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Predicción meteorológica para la zona montañosa que se pasa como parámetro (area) con validez para el día (día).  Periodicidad de actualización: continuamente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de Área Montañosa | Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | peu1 | Picos de Europa   | | nav1  | Pirineo Navarro   | | arn1  | Pirineo Aragonés  | | cat1  | Pirineo Catalán   | | rio1  | Ibérica Riojana   | | arn2  | Ibérica Aragonesa   | | mad2  | Sierras de Guadarrama y Somosierra  | | gre1  | Sierra de Gredos   | | nev1  | Sierra Nevada</param>
        /// <param name="dia"> | Código de día | Día | |- -- -- -- -- -|- -- -- -- -- -| | 0 | día actual  | | 1  | d+1 (mañana)   | | 2  | d+2 (pasado mañana)  | | 3  | d+3 (siguente a pasado mañana)</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> PrediccinDeMontaaTiempoActual_AsyncWithHttpInfo (string area, string dia);
        /// <summary>
        /// Predicción de montaña. Tiempo pasado.
        /// </summary>
        /// <remarks>
        /// Breve resumen con lo más significativo de las condiciones meteorológicas registradas en la zona de montaña que se pasa como parámetro (area) en las últimas 24-36 horas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de Área Montañosa | Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | peu1 | Picos de Europa   | | nav1  | Pirineo Navarro   | | arn1  | Pirineo Aragonés  | | cat1  | Pirineo Catalán   | | rio1  | Ibérica Riojana   | | arn2  | Ibérica Aragonesa   | | mad2  | Sierras de Guadarrama y Somosierra  | | gre1  | Sierra de Gredos   | | nev1  | Sierra Nevada</param>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> PrediccinDeMontaaTiempoPasado_Async (string area);

        /// <summary>
        /// Predicción de montaña. Tiempo pasado.
        /// </summary>
        /// <remarks>
        /// Breve resumen con lo más significativo de las condiciones meteorológicas registradas en la zona de montaña que se pasa como parámetro (area) en las últimas 24-36 horas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de Área Montañosa | Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | peu1 | Picos de Europa   | | nav1  | Pirineo Navarro   | | arn1  | Pirineo Aragonés  | | cat1  | Pirineo Catalán   | | rio1  | Ibérica Riojana   | | arn2  | Ibérica Aragonesa   | | mad2  | Sierras de Guadarrama y Somosierra  | | gre1  | Sierra de Gredos   | | nev1  | Sierra Nevada</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> PrediccinDeMontaaTiempoPasado_AsyncWithHttpInfo (string area);
        /// <summary>
        /// Predicción de radiación ultravioleta (UVI).
        /// </summary>
        /// <remarks>
        ///  Predicción de Índice de radiación UV máximo en condiciones de cielo despejado para el día seleccionado.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dia"> | Código de día | Día | |- -- -- -- -- -|- -- -- -- -- -| | 0 | día actual  | | 1  | d+1 (mañana)   | | 2  | d+2 (pasado mañana)  | | 3  | d+3 (dentro de 3 días) | | 4  | d+4 (dentro de 4 días)</param>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> PrediccinDeRadiacinUltravioletaUVI_Async (string dia);

        /// <summary>
        /// Predicción de radiación ultravioleta (UVI).
        /// </summary>
        /// <remarks>
        ///  Predicción de Índice de radiación UV máximo en condiciones de cielo despejado para el día seleccionado.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dia"> | Código de día | Día | |- -- -- -- -- -|- -- -- -- -- -| | 0 | día actual  | | 1  | d+1 (mañana)   | | 2  | d+2 (pasado mañana)  | | 3  | d+3 (dentro de 3 días) | | 4  | d+4 (dentro de 4 días)</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> PrediccinDeRadiacinUltravioletaUVI_AsyncWithHttpInfo (string dia);
        /// <summary>
        /// Predicción para las playas. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// La predicción diaria de la playa que se pasa como parámetro. Establece el estado de nubosidad para unas horas determinadas, las 11 y las 17 hora oficial. Se analiza también si se espera precipitación en el entorno de esas horas, entre las 08 y las 14 horas y entre las 14 y 20 horas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playa">Código de playa   http://www.aemet.es/documentos/es/eltiempo/prediccion/playas/Playas_codigos.csv</param>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> PrediccinParaLasPlayasTiempoActual_Async (string playa);

        /// <summary>
        /// Predicción para las playas. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// La predicción diaria de la playa que se pasa como parámetro. Establece el estado de nubosidad para unas horas determinadas, las 11 y las 17 hora oficial. Se analiza también si se espera precipitación en el entorno de esas horas, entre las 08 y las 14 horas y entre las 14 y 20 horas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playa">Código de playa   http://www.aemet.es/documentos/es/eltiempo/prediccion/playas/Playas_codigos.csv</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> PrediccinParaLasPlayasTiempoActual_AsyncWithHttpInfo (string playa);
        /// <summary>
        /// Predicción por municipios diaria. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Predicción para el municipio que se pasa como parámetro (municipio). Periodicidad de actualización: continuamente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="municipio">Código de municipio   http://www.ine.es/daco/daco42/codmun/codmunmapa.htm</param>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> PrediccinPorMunicipiosDiariaTiempoActual_Async (string municipio);

        /// <summary>
        /// Predicción por municipios diaria. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Predicción para el municipio que se pasa como parámetro (municipio). Periodicidad de actualización: continuamente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="municipio">Código de municipio   http://www.ine.es/daco/daco42/codmun/codmunmapa.htm</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> PrediccinPorMunicipiosDiariaTiempoActual_AsyncWithHttpInfo (string municipio);
        /// <summary>
        /// Predicción por municipios horaria. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Predicción horaria para el municipio que se pasa como parámetro (municipio). Presenta la información de hora en hora hasta 48 horas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="municipio">Código de municipio  http://www.ine.es/daco/daco42/codmun/codmunmapa.htm</param>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> PrediccinPorMunicipiosHorariaTiempoActual_Async (string municipio);

        /// <summary>
        /// Predicción por municipios horaria. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Predicción horaria para el municipio que se pasa como parámetro (municipio). Presenta la información de hora en hora hasta 48 horas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="municipio">Código de municipio  http://www.ine.es/daco/daco42/codmun/codmunmapa.htm</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> PrediccinPorMunicipiosHorariaTiempoActual_AsyncWithHttpInfo (string municipio);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PrediccionesEspecificasApi : IPrediccionesEspecificasApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PrediccionesEspecificasApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PrediccionesEspecificasApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PrediccionesEspecificasApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PrediccionesEspecificasApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Información nivológica. Información nivológica para la zona montañosa que se pasa como parámetro (area).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de  Área Montañosa |  Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | 0 | Pirineo Catalán  | | 1  | Pirineo Navarro y Aragonés</param>
        /// <returns>Model200</returns>
        public Model200 InformacionNivologica_ (string area)
        {
             ApiResponse<Model200> localVarResponse = InformacionNivologica_WithHttpInfo(area);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Información nivológica. Información nivológica para la zona montañosa que se pasa como parámetro (area).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de  Área Montañosa |  Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | 0 | Pirineo Catalán  | | 1  | Pirineo Navarro y Aragonés</param>
        /// <returns>ApiResponse of Model200</returns>
        public ApiResponse< Model200 > InformacionNivologica_WithHttpInfo (string area)
        {
            // verify the required parameter 'area' is set
            if (area == null)
                throw new ApiException(400, "Missing required parameter 'area' when calling PrediccionesEspecificasApi->InformacionNivologica_");

            var localVarPath = "/api/prediccion/especifica/nivologica/{area}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (area != null) localVarPathParams.Add("area", this.Configuration.ApiClient.ParameterToString(area)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InformacionNivologica_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Información nivológica. Información nivológica para la zona montañosa que se pasa como parámetro (area).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de  Área Montañosa |  Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | 0 | Pirineo Catalán  | | 1  | Pirineo Navarro y Aragonés</param>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> InformacionNivologica_Async (string area)
        {
             ApiResponse<Model200> localVarResponse = await InformacionNivologica_AsyncWithHttpInfo(area);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Información nivológica. Información nivológica para la zona montañosa que se pasa como parámetro (area).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de  Área Montañosa |  Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | 0 | Pirineo Catalán  | | 1  | Pirineo Navarro y Aragonés</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model200>> InformacionNivologica_AsyncWithHttpInfo (string area)
        {
            // verify the required parameter 'area' is set
            if (area == null)
                throw new ApiException(400, "Missing required parameter 'area' when calling PrediccionesEspecificasApi->InformacionNivologica_");

            var localVarPath = "/api/prediccion/especifica/nivologica/{area}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (area != null) localVarPathParams.Add("area", this.Configuration.ApiClient.ParameterToString(area)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InformacionNivologica_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Predicción de montaña. Tiempo actual. Predicción meteorológica para la zona montañosa que se pasa como parámetro (area) con validez para el día (día).  Periodicidad de actualización: continuamente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de Área Montañosa | Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | peu1 | Picos de Europa   | | nav1  | Pirineo Navarro   | | arn1  | Pirineo Aragonés  | | cat1  | Pirineo Catalán   | | rio1  | Ibérica Riojana   | | arn2  | Ibérica Aragonesa   | | mad2  | Sierras de Guadarrama y Somosierra  | | gre1  | Sierra de Gredos   | | nev1  | Sierra Nevada</param>
        /// <param name="dia"> | Código de día | Día | |- -- -- -- -- -|- -- -- -- -- -| | 0 | día actual  | | 1  | d+1 (mañana)   | | 2  | d+2 (pasado mañana)  | | 3  | d+3 (siguente a pasado mañana)</param>
        /// <returns>Model200</returns>
        public Model200 PrediccinDeMontaaTiempoActual_ (string area, string dia)
        {
             ApiResponse<Model200> localVarResponse = PrediccinDeMontaaTiempoActual_WithHttpInfo(area, dia);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Predicción de montaña. Tiempo actual. Predicción meteorológica para la zona montañosa que se pasa como parámetro (area) con validez para el día (día).  Periodicidad de actualización: continuamente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de Área Montañosa | Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | peu1 | Picos de Europa   | | nav1  | Pirineo Navarro   | | arn1  | Pirineo Aragonés  | | cat1  | Pirineo Catalán   | | rio1  | Ibérica Riojana   | | arn2  | Ibérica Aragonesa   | | mad2  | Sierras de Guadarrama y Somosierra  | | gre1  | Sierra de Gredos   | | nev1  | Sierra Nevada</param>
        /// <param name="dia"> | Código de día | Día | |- -- -- -- -- -|- -- -- -- -- -| | 0 | día actual  | | 1  | d+1 (mañana)   | | 2  | d+2 (pasado mañana)  | | 3  | d+3 (siguente a pasado mañana)</param>
        /// <returns>ApiResponse of Model200</returns>
        public ApiResponse< Model200 > PrediccinDeMontaaTiempoActual_WithHttpInfo (string area, string dia)
        {
            // verify the required parameter 'area' is set
            if (area == null)
                throw new ApiException(400, "Missing required parameter 'area' when calling PrediccionesEspecificasApi->PrediccinDeMontaaTiempoActual_");
            // verify the required parameter 'dia' is set
            if (dia == null)
                throw new ApiException(400, "Missing required parameter 'dia' when calling PrediccionesEspecificasApi->PrediccinDeMontaaTiempoActual_");

            var localVarPath = "/api/prediccion/especifica/montaña/pasada/area/{area}/dia/{dia}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (area != null) localVarPathParams.Add("area", this.Configuration.ApiClient.ParameterToString(area)); // path parameter
            if (dia != null) localVarPathParams.Add("dia", this.Configuration.ApiClient.ParameterToString(dia)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrediccinDeMontaaTiempoActual_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Predicción de montaña. Tiempo actual. Predicción meteorológica para la zona montañosa que se pasa como parámetro (area) con validez para el día (día).  Periodicidad de actualización: continuamente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de Área Montañosa | Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | peu1 | Picos de Europa   | | nav1  | Pirineo Navarro   | | arn1  | Pirineo Aragonés  | | cat1  | Pirineo Catalán   | | rio1  | Ibérica Riojana   | | arn2  | Ibérica Aragonesa   | | mad2  | Sierras de Guadarrama y Somosierra  | | gre1  | Sierra de Gredos   | | nev1  | Sierra Nevada</param>
        /// <param name="dia"> | Código de día | Día | |- -- -- -- -- -|- -- -- -- -- -| | 0 | día actual  | | 1  | d+1 (mañana)   | | 2  | d+2 (pasado mañana)  | | 3  | d+3 (siguente a pasado mañana)</param>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> PrediccinDeMontaaTiempoActual_Async (string area, string dia)
        {
             ApiResponse<Model200> localVarResponse = await PrediccinDeMontaaTiempoActual_AsyncWithHttpInfo(area, dia);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Predicción de montaña. Tiempo actual. Predicción meteorológica para la zona montañosa que se pasa como parámetro (area) con validez para el día (día).  Periodicidad de actualización: continuamente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de Área Montañosa | Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | peu1 | Picos de Europa   | | nav1  | Pirineo Navarro   | | arn1  | Pirineo Aragonés  | | cat1  | Pirineo Catalán   | | rio1  | Ibérica Riojana   | | arn2  | Ibérica Aragonesa   | | mad2  | Sierras de Guadarrama y Somosierra  | | gre1  | Sierra de Gredos   | | nev1  | Sierra Nevada</param>
        /// <param name="dia"> | Código de día | Día | |- -- -- -- -- -|- -- -- -- -- -| | 0 | día actual  | | 1  | d+1 (mañana)   | | 2  | d+2 (pasado mañana)  | | 3  | d+3 (siguente a pasado mañana)</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model200>> PrediccinDeMontaaTiempoActual_AsyncWithHttpInfo (string area, string dia)
        {
            // verify the required parameter 'area' is set
            if (area == null)
                throw new ApiException(400, "Missing required parameter 'area' when calling PrediccionesEspecificasApi->PrediccinDeMontaaTiempoActual_");
            // verify the required parameter 'dia' is set
            if (dia == null)
                throw new ApiException(400, "Missing required parameter 'dia' when calling PrediccionesEspecificasApi->PrediccinDeMontaaTiempoActual_");

            var localVarPath = "/api/prediccion/especifica/montaña/pasada/area/{area}/dia/{dia}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (area != null) localVarPathParams.Add("area", this.Configuration.ApiClient.ParameterToString(area)); // path parameter
            if (dia != null) localVarPathParams.Add("dia", this.Configuration.ApiClient.ParameterToString(dia)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrediccinDeMontaaTiempoActual_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Predicción de montaña. Tiempo pasado. Breve resumen con lo más significativo de las condiciones meteorológicas registradas en la zona de montaña que se pasa como parámetro (area) en las últimas 24-36 horas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de Área Montañosa | Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | peu1 | Picos de Europa   | | nav1  | Pirineo Navarro   | | arn1  | Pirineo Aragonés  | | cat1  | Pirineo Catalán   | | rio1  | Ibérica Riojana   | | arn2  | Ibérica Aragonesa   | | mad2  | Sierras de Guadarrama y Somosierra  | | gre1  | Sierra de Gredos   | | nev1  | Sierra Nevada</param>
        /// <returns>Model200</returns>
        public Model200 PrediccinDeMontaaTiempoPasado_ (string area)
        {
             ApiResponse<Model200> localVarResponse = PrediccinDeMontaaTiempoPasado_WithHttpInfo(area);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Predicción de montaña. Tiempo pasado. Breve resumen con lo más significativo de las condiciones meteorológicas registradas en la zona de montaña que se pasa como parámetro (area) en las últimas 24-36 horas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de Área Montañosa | Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | peu1 | Picos de Europa   | | nav1  | Pirineo Navarro   | | arn1  | Pirineo Aragonés  | | cat1  | Pirineo Catalán   | | rio1  | Ibérica Riojana   | | arn2  | Ibérica Aragonesa   | | mad2  | Sierras de Guadarrama y Somosierra  | | gre1  | Sierra de Gredos   | | nev1  | Sierra Nevada</param>
        /// <returns>ApiResponse of Model200</returns>
        public ApiResponse< Model200 > PrediccinDeMontaaTiempoPasado_WithHttpInfo (string area)
        {
            // verify the required parameter 'area' is set
            if (area == null)
                throw new ApiException(400, "Missing required parameter 'area' when calling PrediccionesEspecificasApi->PrediccinDeMontaaTiempoPasado_");

            var localVarPath = "/api/prediccion/especifica/montaña/pasada/area/{area}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (area != null) localVarPathParams.Add("area", this.Configuration.ApiClient.ParameterToString(area)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrediccinDeMontaaTiempoPasado_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Predicción de montaña. Tiempo pasado. Breve resumen con lo más significativo de las condiciones meteorológicas registradas en la zona de montaña que se pasa como parámetro (area) en las últimas 24-36 horas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de Área Montañosa | Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | peu1 | Picos de Europa   | | nav1  | Pirineo Navarro   | | arn1  | Pirineo Aragonés  | | cat1  | Pirineo Catalán   | | rio1  | Ibérica Riojana   | | arn2  | Ibérica Aragonesa   | | mad2  | Sierras de Guadarrama y Somosierra  | | gre1  | Sierra de Gredos   | | nev1  | Sierra Nevada</param>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> PrediccinDeMontaaTiempoPasado_Async (string area)
        {
             ApiResponse<Model200> localVarResponse = await PrediccinDeMontaaTiempoPasado_AsyncWithHttpInfo(area);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Predicción de montaña. Tiempo pasado. Breve resumen con lo más significativo de las condiciones meteorológicas registradas en la zona de montaña que se pasa como parámetro (area) en las últimas 24-36 horas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"> | Código de Área Montañosa | Área Montañosa | |- -- -- -- -- -|- -- -- -- -- -| | peu1 | Picos de Europa   | | nav1  | Pirineo Navarro   | | arn1  | Pirineo Aragonés  | | cat1  | Pirineo Catalán   | | rio1  | Ibérica Riojana   | | arn2  | Ibérica Aragonesa   | | mad2  | Sierras de Guadarrama y Somosierra  | | gre1  | Sierra de Gredos   | | nev1  | Sierra Nevada</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model200>> PrediccinDeMontaaTiempoPasado_AsyncWithHttpInfo (string area)
        {
            // verify the required parameter 'area' is set
            if (area == null)
                throw new ApiException(400, "Missing required parameter 'area' when calling PrediccionesEspecificasApi->PrediccinDeMontaaTiempoPasado_");

            var localVarPath = "/api/prediccion/especifica/montaña/pasada/area/{area}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (area != null) localVarPathParams.Add("area", this.Configuration.ApiClient.ParameterToString(area)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrediccinDeMontaaTiempoPasado_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Predicción de radiación ultravioleta (UVI).  Predicción de Índice de radiación UV máximo en condiciones de cielo despejado para el día seleccionado.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dia"> | Código de día | Día | |- -- -- -- -- -|- -- -- -- -- -| | 0 | día actual  | | 1  | d+1 (mañana)   | | 2  | d+2 (pasado mañana)  | | 3  | d+3 (dentro de 3 días) | | 4  | d+4 (dentro de 4 días)</param>
        /// <returns>Model200</returns>
        public Model200 PrediccinDeRadiacinUltravioletaUVI_ (string dia)
        {
             ApiResponse<Model200> localVarResponse = PrediccinDeRadiacinUltravioletaUVI_WithHttpInfo(dia);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Predicción de radiación ultravioleta (UVI).  Predicción de Índice de radiación UV máximo en condiciones de cielo despejado para el día seleccionado.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dia"> | Código de día | Día | |- -- -- -- -- -|- -- -- -- -- -| | 0 | día actual  | | 1  | d+1 (mañana)   | | 2  | d+2 (pasado mañana)  | | 3  | d+3 (dentro de 3 días) | | 4  | d+4 (dentro de 4 días)</param>
        /// <returns>ApiResponse of Model200</returns>
        public ApiResponse< Model200 > PrediccinDeRadiacinUltravioletaUVI_WithHttpInfo (string dia)
        {
            // verify the required parameter 'dia' is set
            if (dia == null)
                throw new ApiException(400, "Missing required parameter 'dia' when calling PrediccionesEspecificasApi->PrediccinDeRadiacinUltravioletaUVI_");

            var localVarPath = "/api/prediccion/especifica/uvi/{dia}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dia != null) localVarPathParams.Add("dia", this.Configuration.ApiClient.ParameterToString(dia)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrediccinDeRadiacinUltravioletaUVI_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Predicción de radiación ultravioleta (UVI).  Predicción de Índice de radiación UV máximo en condiciones de cielo despejado para el día seleccionado.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dia"> | Código de día | Día | |- -- -- -- -- -|- -- -- -- -- -| | 0 | día actual  | | 1  | d+1 (mañana)   | | 2  | d+2 (pasado mañana)  | | 3  | d+3 (dentro de 3 días) | | 4  | d+4 (dentro de 4 días)</param>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> PrediccinDeRadiacinUltravioletaUVI_Async (string dia)
        {
             ApiResponse<Model200> localVarResponse = await PrediccinDeRadiacinUltravioletaUVI_AsyncWithHttpInfo(dia);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Predicción de radiación ultravioleta (UVI).  Predicción de Índice de radiación UV máximo en condiciones de cielo despejado para el día seleccionado.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dia"> | Código de día | Día | |- -- -- -- -- -|- -- -- -- -- -| | 0 | día actual  | | 1  | d+1 (mañana)   | | 2  | d+2 (pasado mañana)  | | 3  | d+3 (dentro de 3 días) | | 4  | d+4 (dentro de 4 días)</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model200>> PrediccinDeRadiacinUltravioletaUVI_AsyncWithHttpInfo (string dia)
        {
            // verify the required parameter 'dia' is set
            if (dia == null)
                throw new ApiException(400, "Missing required parameter 'dia' when calling PrediccionesEspecificasApi->PrediccinDeRadiacinUltravioletaUVI_");

            var localVarPath = "/api/prediccion/especifica/uvi/{dia}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dia != null) localVarPathParams.Add("dia", this.Configuration.ApiClient.ParameterToString(dia)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrediccinDeRadiacinUltravioletaUVI_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Predicción para las playas. Tiempo actual. La predicción diaria de la playa que se pasa como parámetro. Establece el estado de nubosidad para unas horas determinadas, las 11 y las 17 hora oficial. Se analiza también si se espera precipitación en el entorno de esas horas, entre las 08 y las 14 horas y entre las 14 y 20 horas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playa">Código de playa   http://www.aemet.es/documentos/es/eltiempo/prediccion/playas/Playas_codigos.csv</param>
        /// <returns>Model200</returns>
        public Model200 PrediccinParaLasPlayasTiempoActual_ (string playa)
        {
             ApiResponse<Model200> localVarResponse = PrediccinParaLasPlayasTiempoActual_WithHttpInfo(playa);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Predicción para las playas. Tiempo actual. La predicción diaria de la playa que se pasa como parámetro. Establece el estado de nubosidad para unas horas determinadas, las 11 y las 17 hora oficial. Se analiza también si se espera precipitación en el entorno de esas horas, entre las 08 y las 14 horas y entre las 14 y 20 horas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playa">Código de playa   http://www.aemet.es/documentos/es/eltiempo/prediccion/playas/Playas_codigos.csv</param>
        /// <returns>ApiResponse of Model200</returns>
        public ApiResponse< Model200 > PrediccinParaLasPlayasTiempoActual_WithHttpInfo (string playa)
        {
            // verify the required parameter 'playa' is set
            if (playa == null)
                throw new ApiException(400, "Missing required parameter 'playa' when calling PrediccionesEspecificasApi->PrediccinParaLasPlayasTiempoActual_");

            var localVarPath = "/api/prediccion/especifica/playa/{playa}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playa != null) localVarPathParams.Add("playa", this.Configuration.ApiClient.ParameterToString(playa)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrediccinParaLasPlayasTiempoActual_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Predicción para las playas. Tiempo actual. La predicción diaria de la playa que se pasa como parámetro. Establece el estado de nubosidad para unas horas determinadas, las 11 y las 17 hora oficial. Se analiza también si se espera precipitación en el entorno de esas horas, entre las 08 y las 14 horas y entre las 14 y 20 horas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playa">Código de playa   http://www.aemet.es/documentos/es/eltiempo/prediccion/playas/Playas_codigos.csv</param>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> PrediccinParaLasPlayasTiempoActual_Async (string playa)
        {
             ApiResponse<Model200> localVarResponse = await PrediccinParaLasPlayasTiempoActual_AsyncWithHttpInfo(playa);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Predicción para las playas. Tiempo actual. La predicción diaria de la playa que se pasa como parámetro. Establece el estado de nubosidad para unas horas determinadas, las 11 y las 17 hora oficial. Se analiza también si se espera precipitación en el entorno de esas horas, entre las 08 y las 14 horas y entre las 14 y 20 horas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playa">Código de playa   http://www.aemet.es/documentos/es/eltiempo/prediccion/playas/Playas_codigos.csv</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model200>> PrediccinParaLasPlayasTiempoActual_AsyncWithHttpInfo (string playa)
        {
            // verify the required parameter 'playa' is set
            if (playa == null)
                throw new ApiException(400, "Missing required parameter 'playa' when calling PrediccionesEspecificasApi->PrediccinParaLasPlayasTiempoActual_");

            var localVarPath = "/api/prediccion/especifica/playa/{playa}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playa != null) localVarPathParams.Add("playa", this.Configuration.ApiClient.ParameterToString(playa)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrediccinParaLasPlayasTiempoActual_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Predicción por municipios diaria. Tiempo actual. Predicción para el municipio que se pasa como parámetro (municipio). Periodicidad de actualización: continuamente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="municipio">Código de municipio   http://www.ine.es/daco/daco42/codmun/codmunmapa.htm</param>
        /// <returns>Model200</returns>
        public Model200 PrediccinPorMunicipiosDiariaTiempoActual_ (string municipio)
        {
             ApiResponse<Model200> localVarResponse = PrediccinPorMunicipiosDiariaTiempoActual_WithHttpInfo(municipio);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Predicción por municipios diaria. Tiempo actual. Predicción para el municipio que se pasa como parámetro (municipio). Periodicidad de actualización: continuamente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="municipio">Código de municipio   http://www.ine.es/daco/daco42/codmun/codmunmapa.htm</param>
        /// <returns>ApiResponse of Model200</returns>
        public ApiResponse< Model200 > PrediccinPorMunicipiosDiariaTiempoActual_WithHttpInfo (string municipio)
        {
            // verify the required parameter 'municipio' is set
            if (municipio == null)
                throw new ApiException(400, "Missing required parameter 'municipio' when calling PrediccionesEspecificasApi->PrediccinPorMunicipiosDiariaTiempoActual_");

            var localVarPath = "/api/prediccion/especifica/municipio/diaria/{municipio}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (municipio != null) localVarPathParams.Add("municipio", this.Configuration.ApiClient.ParameterToString(municipio)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrediccinPorMunicipiosDiariaTiempoActual_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Predicción por municipios diaria. Tiempo actual. Predicción para el municipio que se pasa como parámetro (municipio). Periodicidad de actualización: continuamente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="municipio">Código de municipio   http://www.ine.es/daco/daco42/codmun/codmunmapa.htm</param>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> PrediccinPorMunicipiosDiariaTiempoActual_Async (string municipio)
        {
             ApiResponse<Model200> localVarResponse = await PrediccinPorMunicipiosDiariaTiempoActual_AsyncWithHttpInfo(municipio);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Predicción por municipios diaria. Tiempo actual. Predicción para el municipio que se pasa como parámetro (municipio). Periodicidad de actualización: continuamente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="municipio">Código de municipio   http://www.ine.es/daco/daco42/codmun/codmunmapa.htm</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model200>> PrediccinPorMunicipiosDiariaTiempoActual_AsyncWithHttpInfo (string municipio)
        {
            // verify the required parameter 'municipio' is set
            if (municipio == null)
                throw new ApiException(400, "Missing required parameter 'municipio' when calling PrediccionesEspecificasApi->PrediccinPorMunicipiosDiariaTiempoActual_");

            var localVarPath = "/api/prediccion/especifica/municipio/diaria/{municipio}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (municipio != null) localVarPathParams.Add("municipio", this.Configuration.ApiClient.ParameterToString(municipio)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrediccinPorMunicipiosDiariaTiempoActual_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Predicción por municipios horaria. Tiempo actual. Predicción horaria para el municipio que se pasa como parámetro (municipio). Presenta la información de hora en hora hasta 48 horas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="municipio">Código de municipio  http://www.ine.es/daco/daco42/codmun/codmunmapa.htm</param>
        /// <returns>Model200</returns>
        public Model200 PrediccinPorMunicipiosHorariaTiempoActual_ (string municipio)
        {
             ApiResponse<Model200> localVarResponse = PrediccinPorMunicipiosHorariaTiempoActual_WithHttpInfo(municipio);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Predicción por municipios horaria. Tiempo actual. Predicción horaria para el municipio que se pasa como parámetro (municipio). Presenta la información de hora en hora hasta 48 horas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="municipio">Código de municipio  http://www.ine.es/daco/daco42/codmun/codmunmapa.htm</param>
        /// <returns>ApiResponse of Model200</returns>
        public ApiResponse< Model200 > PrediccinPorMunicipiosHorariaTiempoActual_WithHttpInfo (string municipio)
        {
            // verify the required parameter 'municipio' is set
            if (municipio == null)
                throw new ApiException(400, "Missing required parameter 'municipio' when calling PrediccionesEspecificasApi->PrediccinPorMunicipiosHorariaTiempoActual_");

            var localVarPath = "/api/prediccion/especifica/municipio/horaria/{municipio}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (municipio != null) localVarPathParams.Add("municipio", this.Configuration.ApiClient.ParameterToString(municipio)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrediccinPorMunicipiosHorariaTiempoActual_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Predicción por municipios horaria. Tiempo actual. Predicción horaria para el municipio que se pasa como parámetro (municipio). Presenta la información de hora en hora hasta 48 horas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="municipio">Código de municipio  http://www.ine.es/daco/daco42/codmun/codmunmapa.htm</param>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> PrediccinPorMunicipiosHorariaTiempoActual_Async (string municipio)
        {
             ApiResponse<Model200> localVarResponse = await PrediccinPorMunicipiosHorariaTiempoActual_AsyncWithHttpInfo(municipio);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Predicción por municipios horaria. Tiempo actual. Predicción horaria para el municipio que se pasa como parámetro (municipio). Presenta la información de hora en hora hasta 48 horas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="municipio">Código de municipio  http://www.ine.es/daco/daco42/codmun/codmunmapa.htm</param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model200>> PrediccinPorMunicipiosHorariaTiempoActual_AsyncWithHttpInfo (string municipio)
        {
            // verify the required parameter 'municipio' is set
            if (municipio == null)
                throw new ApiException(400, "Missing required parameter 'municipio' when calling PrediccionesEspecificasApi->PrediccinPorMunicipiosHorariaTiempoActual_");

            var localVarPath = "/api/prediccion/especifica/municipio/horaria/{municipio}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (municipio != null) localVarPathParams.Add("municipio", this.Configuration.ApiClient.ParameterToString(municipio)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrediccinPorMunicipiosHorariaTiempoActual_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

    }
}
