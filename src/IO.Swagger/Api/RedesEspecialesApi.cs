/* 
 * AEMET OpenData
 *
 * AEMET OpenData es una API REST desarrollado por AEMET que permite la difusión y la reutilización de la información meteorológica y climatológica de la Agencia, en el sentido indicado en la Ley 18/2015, de 9 de julio, por la que se modifica la Ley 37/2007, de 16 de noviembre, sobre reutilización de la información del sector público. (IMPORTANTE: Para poder realizar peticiones, es necesario introducir en API Key haciendo clic en el círculo rojo de recurso REST).
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRedesEspecialesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Contenido total de ozono. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Dato medio diario de contenido total de ozono. Cada 24 h (actualmente, en fines de semana, festivos y vacaciones no se genera por la falta de personal en el Centro Radiométrico Nacional).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Model200</returns>
        Model200 ContenidoTotalDeOzonoTiempoActual_ ();

        /// <summary>
        /// Contenido total de ozono. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Dato medio diario de contenido total de ozono. Cada 24 h (actualmente, en fines de semana, festivos y vacaciones no se genera por la falta de personal en el Centro Radiométrico Nacional).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> ContenidoTotalDeOzonoTiempoActual_WithHttpInfo ();
        /// <summary>
        /// Datos de contaminación de fondo. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Ficheros diarios con datos diezminutales de la estación de la red de contaminación de fondo EMEP/VAG/CAMP pasada por parámetro, de temperatura, presión, humedad, viento (dirección y velocidad), radiación global, precipitación y 4 componentes químicos: O3,SO2,NO,NO2 y PM10. Los datos se encuentran en formato FINN (propio del Ministerio de Medio Ambiente). Periodicidad: cada hora.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nombreEstacion"> | Código | Estación de la Red EMEP | |- -- -- -- -- -|- -- -- -- -- -| | 11  | Barcarrota (Badajoz)   | | 10  | Cabo de Creus (Girona)   | | 09  | Campisábalos (Guadalajara)   | | 17  | Doñana (Huelva)  | | 14  | Els Torms (Lleida)   | | 06  | Mahón (Illes Balears)   | | 08  | Niembro-Llanes (Asturias)   | | 05  | Noia (A Coruña)   | | 16  | O Saviñao (Lugo)   | | 13  | Peñausende (Zamora)   | | 01  | San Pablo de los Montes (Toledo)   | | 07  | Víznar (Granada)   | | 12  | Zarra (Valencia) </param>
        /// <returns>Model200</returns>
        Model200 DatosDeContaminacinDeFondoTiempoActual_ (string nombreEstacion);

        /// <summary>
        /// Datos de contaminación de fondo. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Ficheros diarios con datos diezminutales de la estación de la red de contaminación de fondo EMEP/VAG/CAMP pasada por parámetro, de temperatura, presión, humedad, viento (dirección y velocidad), radiación global, precipitación y 4 componentes químicos: O3,SO2,NO,NO2 y PM10. Los datos se encuentran en formato FINN (propio del Ministerio de Medio Ambiente). Periodicidad: cada hora.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nombreEstacion"> | Código | Estación de la Red EMEP | |- -- -- -- -- -|- -- -- -- -- -| | 11  | Barcarrota (Badajoz)   | | 10  | Cabo de Creus (Girona)   | | 09  | Campisábalos (Guadalajara)   | | 17  | Doñana (Huelva)  | | 14  | Els Torms (Lleida)   | | 06  | Mahón (Illes Balears)   | | 08  | Niembro-Llanes (Asturias)   | | 05  | Noia (A Coruña)   | | 16  | O Saviñao (Lugo)   | | 13  | Peñausende (Zamora)   | | 01  | San Pablo de los Montes (Toledo)   | | 07  | Víznar (Granada)   | | 12  | Zarra (Valencia) </param>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> DatosDeContaminacinDeFondoTiempoActual_WithHttpInfo (string nombreEstacion);
        /// <summary>
        /// Datos de radiación global, directa o difusa. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Datos horarios (HORA SOLAR VERDADERA) acumulados de radiación  global, directa, difusa e infrarroja, y datos semihorarios  (HORA SOLAR VERDADERA) acumulados de radiación ultravioleta eritemática.Datos diarios acumulados  de radiación global, directa, difusa, ultravioleta eritemática e infrarroja. Periodicidad: Cada 24h (actualmente en fines de semana, festivos y vacaciones, no se genera por la ausencia de personal en el Centro Radiométrico Nacional).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Model200</returns>
        Model200 DatosDeRadiacinGlobalDirectaODifusaTiempoActual_ ();

        /// <summary>
        /// Datos de radiación global, directa o difusa. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Datos horarios (HORA SOLAR VERDADERA) acumulados de radiación  global, directa, difusa e infrarroja, y datos semihorarios  (HORA SOLAR VERDADERA) acumulados de radiación ultravioleta eritemática.Datos diarios acumulados  de radiación global, directa, difusa, ultravioleta eritemática e infrarroja. Periodicidad: Cada 24h (actualmente en fines de semana, festivos y vacaciones, no se genera por la ausencia de personal en el Centro Radiométrico Nacional).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> DatosDeRadiacinGlobalDirectaODifusaTiempoActual_WithHttpInfo ();
        /// <summary>
        /// Perfiles verticales de ozono. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Perfil Vertical de Ozono de la estación pasada por parámetro. Periodicidad: cada 7 días.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estacion"> | Código | Estación | |- -- -- -- -- -|- -- -- -- -- -| | canarias  | Izaña   | | peninsula  | Madrid   </param>
        /// <returns>Model200</returns>
        Model200 PerfilesVerticalesDeOzonoTiempoActual_ (string estacion);

        /// <summary>
        /// Perfiles verticales de ozono. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Perfil Vertical de Ozono de la estación pasada por parámetro. Periodicidad: cada 7 días.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estacion"> | Código | Estación | |- -- -- -- -- -|- -- -- -- -- -| | canarias  | Izaña   | | peninsula  | Madrid   </param>
        /// <returns>ApiResponse of Model200</returns>
        ApiResponse<Model200> PerfilesVerticalesDeOzonoTiempoActual_WithHttpInfo (string estacion);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Contenido total de ozono. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Dato medio diario de contenido total de ozono. Cada 24 h (actualmente, en fines de semana, festivos y vacaciones no se genera por la falta de personal en el Centro Radiométrico Nacional).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> ContenidoTotalDeOzonoTiempoActual_Async ();

        /// <summary>
        /// Contenido total de ozono. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Dato medio diario de contenido total de ozono. Cada 24 h (actualmente, en fines de semana, festivos y vacaciones no se genera por la falta de personal en el Centro Radiométrico Nacional).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> ContenidoTotalDeOzonoTiempoActual_AsyncWithHttpInfo ();
        /// <summary>
        /// Datos de contaminación de fondo. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Ficheros diarios con datos diezminutales de la estación de la red de contaminación de fondo EMEP/VAG/CAMP pasada por parámetro, de temperatura, presión, humedad, viento (dirección y velocidad), radiación global, precipitación y 4 componentes químicos: O3,SO2,NO,NO2 y PM10. Los datos se encuentran en formato FINN (propio del Ministerio de Medio Ambiente). Periodicidad: cada hora.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nombreEstacion"> | Código | Estación de la Red EMEP | |- -- -- -- -- -|- -- -- -- -- -| | 11  | Barcarrota (Badajoz)   | | 10  | Cabo de Creus (Girona)   | | 09  | Campisábalos (Guadalajara)   | | 17  | Doñana (Huelva)  | | 14  | Els Torms (Lleida)   | | 06  | Mahón (Illes Balears)   | | 08  | Niembro-Llanes (Asturias)   | | 05  | Noia (A Coruña)   | | 16  | O Saviñao (Lugo)   | | 13  | Peñausende (Zamora)   | | 01  | San Pablo de los Montes (Toledo)   | | 07  | Víznar (Granada)   | | 12  | Zarra (Valencia) </param>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> DatosDeContaminacinDeFondoTiempoActual_Async (string nombreEstacion);

        /// <summary>
        /// Datos de contaminación de fondo. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Ficheros diarios con datos diezminutales de la estación de la red de contaminación de fondo EMEP/VAG/CAMP pasada por parámetro, de temperatura, presión, humedad, viento (dirección y velocidad), radiación global, precipitación y 4 componentes químicos: O3,SO2,NO,NO2 y PM10. Los datos se encuentran en formato FINN (propio del Ministerio de Medio Ambiente). Periodicidad: cada hora.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nombreEstacion"> | Código | Estación de la Red EMEP | |- -- -- -- -- -|- -- -- -- -- -| | 11  | Barcarrota (Badajoz)   | | 10  | Cabo de Creus (Girona)   | | 09  | Campisábalos (Guadalajara)   | | 17  | Doñana (Huelva)  | | 14  | Els Torms (Lleida)   | | 06  | Mahón (Illes Balears)   | | 08  | Niembro-Llanes (Asturias)   | | 05  | Noia (A Coruña)   | | 16  | O Saviñao (Lugo)   | | 13  | Peñausende (Zamora)   | | 01  | San Pablo de los Montes (Toledo)   | | 07  | Víznar (Granada)   | | 12  | Zarra (Valencia) </param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> DatosDeContaminacinDeFondoTiempoActual_AsyncWithHttpInfo (string nombreEstacion);
        /// <summary>
        /// Datos de radiación global, directa o difusa. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Datos horarios (HORA SOLAR VERDADERA) acumulados de radiación  global, directa, difusa e infrarroja, y datos semihorarios  (HORA SOLAR VERDADERA) acumulados de radiación ultravioleta eritemática.Datos diarios acumulados  de radiación global, directa, difusa, ultravioleta eritemática e infrarroja. Periodicidad: Cada 24h (actualmente en fines de semana, festivos y vacaciones, no se genera por la ausencia de personal en el Centro Radiométrico Nacional).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> DatosDeRadiacinGlobalDirectaODifusaTiempoActual_Async ();

        /// <summary>
        /// Datos de radiación global, directa o difusa. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Datos horarios (HORA SOLAR VERDADERA) acumulados de radiación  global, directa, difusa e infrarroja, y datos semihorarios  (HORA SOLAR VERDADERA) acumulados de radiación ultravioleta eritemática.Datos diarios acumulados  de radiación global, directa, difusa, ultravioleta eritemática e infrarroja. Periodicidad: Cada 24h (actualmente en fines de semana, festivos y vacaciones, no se genera por la ausencia de personal en el Centro Radiométrico Nacional).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> DatosDeRadiacinGlobalDirectaODifusaTiempoActual_AsyncWithHttpInfo ();
        /// <summary>
        /// Perfiles verticales de ozono. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Perfil Vertical de Ozono de la estación pasada por parámetro. Periodicidad: cada 7 días.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estacion"> | Código | Estación | |- -- -- -- -- -|- -- -- -- -- -| | canarias  | Izaña   | | peninsula  | Madrid   </param>
        /// <returns>Task of Model200</returns>
        System.Threading.Tasks.Task<Model200> PerfilesVerticalesDeOzonoTiempoActual_Async (string estacion);

        /// <summary>
        /// Perfiles verticales de ozono. Tiempo actual.
        /// </summary>
        /// <remarks>
        /// Perfil Vertical de Ozono de la estación pasada por parámetro. Periodicidad: cada 7 días.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estacion"> | Código | Estación | |- -- -- -- -- -|- -- -- -- -- -| | canarias  | Izaña   | | peninsula  | Madrid   </param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model200>> PerfilesVerticalesDeOzonoTiempoActual_AsyncWithHttpInfo (string estacion);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RedesEspecialesApi : IRedesEspecialesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RedesEspecialesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RedesEspecialesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RedesEspecialesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RedesEspecialesApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Contenido total de ozono. Tiempo actual. Dato medio diario de contenido total de ozono. Cada 24 h (actualmente, en fines de semana, festivos y vacaciones no se genera por la falta de personal en el Centro Radiométrico Nacional).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Model200</returns>
        public Model200 ContenidoTotalDeOzonoTiempoActual_ ()
        {
             ApiResponse<Model200> localVarResponse = ContenidoTotalDeOzonoTiempoActual_WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Contenido total de ozono. Tiempo actual. Dato medio diario de contenido total de ozono. Cada 24 h (actualmente, en fines de semana, festivos y vacaciones no se genera por la falta de personal en el Centro Radiométrico Nacional).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Model200</returns>
        public ApiResponse< Model200 > ContenidoTotalDeOzonoTiempoActual_WithHttpInfo ()
        {

            var localVarPath = "/api/red/especial/ozono";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContenidoTotalDeOzonoTiempoActual_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Contenido total de ozono. Tiempo actual. Dato medio diario de contenido total de ozono. Cada 24 h (actualmente, en fines de semana, festivos y vacaciones no se genera por la falta de personal en el Centro Radiométrico Nacional).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> ContenidoTotalDeOzonoTiempoActual_Async ()
        {
             ApiResponse<Model200> localVarResponse = await ContenidoTotalDeOzonoTiempoActual_AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Contenido total de ozono. Tiempo actual. Dato medio diario de contenido total de ozono. Cada 24 h (actualmente, en fines de semana, festivos y vacaciones no se genera por la falta de personal en el Centro Radiométrico Nacional).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model200>> ContenidoTotalDeOzonoTiempoActual_AsyncWithHttpInfo ()
        {

            var localVarPath = "/api/red/especial/ozono";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContenidoTotalDeOzonoTiempoActual_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Datos de contaminación de fondo. Tiempo actual. Ficheros diarios con datos diezminutales de la estación de la red de contaminación de fondo EMEP/VAG/CAMP pasada por parámetro, de temperatura, presión, humedad, viento (dirección y velocidad), radiación global, precipitación y 4 componentes químicos: O3,SO2,NO,NO2 y PM10. Los datos se encuentran en formato FINN (propio del Ministerio de Medio Ambiente). Periodicidad: cada hora.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nombreEstacion"> | Código | Estación de la Red EMEP | |- -- -- -- -- -|- -- -- -- -- -| | 11  | Barcarrota (Badajoz)   | | 10  | Cabo de Creus (Girona)   | | 09  | Campisábalos (Guadalajara)   | | 17  | Doñana (Huelva)  | | 14  | Els Torms (Lleida)   | | 06  | Mahón (Illes Balears)   | | 08  | Niembro-Llanes (Asturias)   | | 05  | Noia (A Coruña)   | | 16  | O Saviñao (Lugo)   | | 13  | Peñausende (Zamora)   | | 01  | San Pablo de los Montes (Toledo)   | | 07  | Víznar (Granada)   | | 12  | Zarra (Valencia) </param>
        /// <returns>Model200</returns>
        public Model200 DatosDeContaminacinDeFondoTiempoActual_ (string nombreEstacion)
        {
             ApiResponse<Model200> localVarResponse = DatosDeContaminacinDeFondoTiempoActual_WithHttpInfo(nombreEstacion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Datos de contaminación de fondo. Tiempo actual. Ficheros diarios con datos diezminutales de la estación de la red de contaminación de fondo EMEP/VAG/CAMP pasada por parámetro, de temperatura, presión, humedad, viento (dirección y velocidad), radiación global, precipitación y 4 componentes químicos: O3,SO2,NO,NO2 y PM10. Los datos se encuentran en formato FINN (propio del Ministerio de Medio Ambiente). Periodicidad: cada hora.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nombreEstacion"> | Código | Estación de la Red EMEP | |- -- -- -- -- -|- -- -- -- -- -| | 11  | Barcarrota (Badajoz)   | | 10  | Cabo de Creus (Girona)   | | 09  | Campisábalos (Guadalajara)   | | 17  | Doñana (Huelva)  | | 14  | Els Torms (Lleida)   | | 06  | Mahón (Illes Balears)   | | 08  | Niembro-Llanes (Asturias)   | | 05  | Noia (A Coruña)   | | 16  | O Saviñao (Lugo)   | | 13  | Peñausende (Zamora)   | | 01  | San Pablo de los Montes (Toledo)   | | 07  | Víznar (Granada)   | | 12  | Zarra (Valencia) </param>
        /// <returns>ApiResponse of Model200</returns>
        public ApiResponse< Model200 > DatosDeContaminacinDeFondoTiempoActual_WithHttpInfo (string nombreEstacion)
        {
            // verify the required parameter 'nombreEstacion' is set
            if (nombreEstacion == null)
                throw new ApiException(400, "Missing required parameter 'nombreEstacion' when calling RedesEspecialesApi->DatosDeContaminacinDeFondoTiempoActual_");

            var localVarPath = "/api/red/especial/contaminacionfondo/estacion/{nombre_estacion}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nombreEstacion != null) localVarPathParams.Add("nombre_estacion", this.Configuration.ApiClient.ParameterToString(nombreEstacion)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DatosDeContaminacinDeFondoTiempoActual_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Datos de contaminación de fondo. Tiempo actual. Ficheros diarios con datos diezminutales de la estación de la red de contaminación de fondo EMEP/VAG/CAMP pasada por parámetro, de temperatura, presión, humedad, viento (dirección y velocidad), radiación global, precipitación y 4 componentes químicos: O3,SO2,NO,NO2 y PM10. Los datos se encuentran en formato FINN (propio del Ministerio de Medio Ambiente). Periodicidad: cada hora.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nombreEstacion"> | Código | Estación de la Red EMEP | |- -- -- -- -- -|- -- -- -- -- -| | 11  | Barcarrota (Badajoz)   | | 10  | Cabo de Creus (Girona)   | | 09  | Campisábalos (Guadalajara)   | | 17  | Doñana (Huelva)  | | 14  | Els Torms (Lleida)   | | 06  | Mahón (Illes Balears)   | | 08  | Niembro-Llanes (Asturias)   | | 05  | Noia (A Coruña)   | | 16  | O Saviñao (Lugo)   | | 13  | Peñausende (Zamora)   | | 01  | San Pablo de los Montes (Toledo)   | | 07  | Víznar (Granada)   | | 12  | Zarra (Valencia) </param>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> DatosDeContaminacinDeFondoTiempoActual_Async (string nombreEstacion)
        {
             ApiResponse<Model200> localVarResponse = await DatosDeContaminacinDeFondoTiempoActual_AsyncWithHttpInfo(nombreEstacion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Datos de contaminación de fondo. Tiempo actual. Ficheros diarios con datos diezminutales de la estación de la red de contaminación de fondo EMEP/VAG/CAMP pasada por parámetro, de temperatura, presión, humedad, viento (dirección y velocidad), radiación global, precipitación y 4 componentes químicos: O3,SO2,NO,NO2 y PM10. Los datos se encuentran en formato FINN (propio del Ministerio de Medio Ambiente). Periodicidad: cada hora.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nombreEstacion"> | Código | Estación de la Red EMEP | |- -- -- -- -- -|- -- -- -- -- -| | 11  | Barcarrota (Badajoz)   | | 10  | Cabo de Creus (Girona)   | | 09  | Campisábalos (Guadalajara)   | | 17  | Doñana (Huelva)  | | 14  | Els Torms (Lleida)   | | 06  | Mahón (Illes Balears)   | | 08  | Niembro-Llanes (Asturias)   | | 05  | Noia (A Coruña)   | | 16  | O Saviñao (Lugo)   | | 13  | Peñausende (Zamora)   | | 01  | San Pablo de los Montes (Toledo)   | | 07  | Víznar (Granada)   | | 12  | Zarra (Valencia) </param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model200>> DatosDeContaminacinDeFondoTiempoActual_AsyncWithHttpInfo (string nombreEstacion)
        {
            // verify the required parameter 'nombreEstacion' is set
            if (nombreEstacion == null)
                throw new ApiException(400, "Missing required parameter 'nombreEstacion' when calling RedesEspecialesApi->DatosDeContaminacinDeFondoTiempoActual_");

            var localVarPath = "/api/red/especial/contaminacionfondo/estacion/{nombre_estacion}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nombreEstacion != null) localVarPathParams.Add("nombre_estacion", this.Configuration.ApiClient.ParameterToString(nombreEstacion)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DatosDeContaminacinDeFondoTiempoActual_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Datos de radiación global, directa o difusa. Tiempo actual. Datos horarios (HORA SOLAR VERDADERA) acumulados de radiación  global, directa, difusa e infrarroja, y datos semihorarios  (HORA SOLAR VERDADERA) acumulados de radiación ultravioleta eritemática.Datos diarios acumulados  de radiación global, directa, difusa, ultravioleta eritemática e infrarroja. Periodicidad: Cada 24h (actualmente en fines de semana, festivos y vacaciones, no se genera por la ausencia de personal en el Centro Radiométrico Nacional).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Model200</returns>
        public Model200 DatosDeRadiacinGlobalDirectaODifusaTiempoActual_ ()
        {
             ApiResponse<Model200> localVarResponse = DatosDeRadiacinGlobalDirectaODifusaTiempoActual_WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Datos de radiación global, directa o difusa. Tiempo actual. Datos horarios (HORA SOLAR VERDADERA) acumulados de radiación  global, directa, difusa e infrarroja, y datos semihorarios  (HORA SOLAR VERDADERA) acumulados de radiación ultravioleta eritemática.Datos diarios acumulados  de radiación global, directa, difusa, ultravioleta eritemática e infrarroja. Periodicidad: Cada 24h (actualmente en fines de semana, festivos y vacaciones, no se genera por la ausencia de personal en el Centro Radiométrico Nacional).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Model200</returns>
        public ApiResponse< Model200 > DatosDeRadiacinGlobalDirectaODifusaTiempoActual_WithHttpInfo ()
        {

            var localVarPath = "/api/red/especial/radiacion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DatosDeRadiacinGlobalDirectaODifusaTiempoActual_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Datos de radiación global, directa o difusa. Tiempo actual. Datos horarios (HORA SOLAR VERDADERA) acumulados de radiación  global, directa, difusa e infrarroja, y datos semihorarios  (HORA SOLAR VERDADERA) acumulados de radiación ultravioleta eritemática.Datos diarios acumulados  de radiación global, directa, difusa, ultravioleta eritemática e infrarroja. Periodicidad: Cada 24h (actualmente en fines de semana, festivos y vacaciones, no se genera por la ausencia de personal en el Centro Radiométrico Nacional).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> DatosDeRadiacinGlobalDirectaODifusaTiempoActual_Async ()
        {
             ApiResponse<Model200> localVarResponse = await DatosDeRadiacinGlobalDirectaODifusaTiempoActual_AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Datos de radiación global, directa o difusa. Tiempo actual. Datos horarios (HORA SOLAR VERDADERA) acumulados de radiación  global, directa, difusa e infrarroja, y datos semihorarios  (HORA SOLAR VERDADERA) acumulados de radiación ultravioleta eritemática.Datos diarios acumulados  de radiación global, directa, difusa, ultravioleta eritemática e infrarroja. Periodicidad: Cada 24h (actualmente en fines de semana, festivos y vacaciones, no se genera por la ausencia de personal en el Centro Radiométrico Nacional).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model200>> DatosDeRadiacinGlobalDirectaODifusaTiempoActual_AsyncWithHttpInfo ()
        {

            var localVarPath = "/api/red/especial/radiacion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DatosDeRadiacinGlobalDirectaODifusaTiempoActual_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Perfiles verticales de ozono. Tiempo actual. Perfil Vertical de Ozono de la estación pasada por parámetro. Periodicidad: cada 7 días.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estacion"> | Código | Estación | |- -- -- -- -- -|- -- -- -- -- -| | canarias  | Izaña   | | peninsula  | Madrid   </param>
        /// <returns>Model200</returns>
        public Model200 PerfilesVerticalesDeOzonoTiempoActual_ (string estacion)
        {
             ApiResponse<Model200> localVarResponse = PerfilesVerticalesDeOzonoTiempoActual_WithHttpInfo(estacion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Perfiles verticales de ozono. Tiempo actual. Perfil Vertical de Ozono de la estación pasada por parámetro. Periodicidad: cada 7 días.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estacion"> | Código | Estación | |- -- -- -- -- -|- -- -- -- -- -| | canarias  | Izaña   | | peninsula  | Madrid   </param>
        /// <returns>ApiResponse of Model200</returns>
        public ApiResponse< Model200 > PerfilesVerticalesDeOzonoTiempoActual_WithHttpInfo (string estacion)
        {
            // verify the required parameter 'estacion' is set
            if (estacion == null)
                throw new ApiException(400, "Missing required parameter 'estacion' when calling RedesEspecialesApi->PerfilesVerticalesDeOzonoTiempoActual_");

            var localVarPath = "/api/red/especial/perfilozono/estacion/{estacion}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (estacion != null) localVarPathParams.Add("estacion", this.Configuration.ApiClient.ParameterToString(estacion)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerfilesVerticalesDeOzonoTiempoActual_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

        /// <summary>
        /// Perfiles verticales de ozono. Tiempo actual. Perfil Vertical de Ozono de la estación pasada por parámetro. Periodicidad: cada 7 días.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estacion"> | Código | Estación | |- -- -- -- -- -|- -- -- -- -- -| | canarias  | Izaña   | | peninsula  | Madrid   </param>
        /// <returns>Task of Model200</returns>
        public async System.Threading.Tasks.Task<Model200> PerfilesVerticalesDeOzonoTiempoActual_Async (string estacion)
        {
             ApiResponse<Model200> localVarResponse = await PerfilesVerticalesDeOzonoTiempoActual_AsyncWithHttpInfo(estacion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Perfiles verticales de ozono. Tiempo actual. Perfil Vertical de Ozono de la estación pasada por parámetro. Periodicidad: cada 7 días.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estacion"> | Código | Estación | |- -- -- -- -- -|- -- -- -- -- -| | canarias  | Izaña   | | peninsula  | Madrid   </param>
        /// <returns>Task of ApiResponse (Model200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model200>> PerfilesVerticalesDeOzonoTiempoActual_AsyncWithHttpInfo (string estacion)
        {
            // verify the required parameter 'estacion' is set
            if (estacion == null)
                throw new ApiException(400, "Missing required parameter 'estacion' when calling RedesEspecialesApi->PerfilesVerticalesDeOzonoTiempoActual_");

            var localVarPath = "/api/red/especial/perfilozono/estacion/{estacion}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (estacion != null) localVarPathParams.Add("estacion", this.Configuration.ApiClient.ParameterToString(estacion)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = this.Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerfilesVerticalesDeOzonoTiempoActual_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model200)));
        }

    }
}
