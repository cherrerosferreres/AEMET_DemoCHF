/* 
 * AEMET OpenData
 *
 * AEMET OpenData es una API REST desarrollado por AEMET que permite la difusión y la reutilización de la información meteorológica y climatológica de la Agencia, en el sentido indicado en la Ley 18/2015, de 9 de julio, por la que se modifica la Ley 37/2007, de 16 de noviembre, sobre reutilización de la información del sector público. (IMPORTANTE: Para poder realizar peticiones, es necesario introducir en API Key haciendo clic en el círculo rojo de recurso REST).
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Model404
    /// </summary>
    [DataContract]
    public partial class Model404 :  IEquatable<Model404>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Model404" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Model404() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Model404" /> class.
        /// </summary>
        /// <param name="descripcion">descripcion (required) (default to &quot;Not Found&quot;).</param>
        /// <param name="estado">estado (required).</param>
        public Model404(string descripcion = "Not Found", int? estado = default(int?))
        {
            // to ensure "descripcion" is required (not null)
            if (descripcion == null)
            {
                throw new InvalidDataException("descripcion is a required property for Model404 and cannot be null");
            }
            else
            {
                this.Descripcion = descripcion;
            }
            // to ensure "estado" is required (not null)
            if (estado == null)
            {
                throw new InvalidDataException("estado is a required property for Model404 and cannot be null");
            }
            else
            {
                this.Estado = estado;
            }
        }
        
        /// <summary>
        /// Gets or Sets Descripcion
        /// </summary>
        [DataMember(Name="descripcion", EmitDefaultValue=false)]
        public string Descripcion { get; set; }

        /// <summary>
        /// Gets or Sets Estado
        /// </summary>
        [DataMember(Name="estado", EmitDefaultValue=false)]
        public int? Estado { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Model404 {\n");
            sb.Append("  Descripcion: ").Append(Descripcion).Append("\n");
            sb.Append("  Estado: ").Append(Estado).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Model404);
        }

        /// <summary>
        /// Returns true if Model404 instances are equal
        /// </summary>
        /// <param name="input">Instance of Model404 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Model404 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Descripcion == input.Descripcion ||
                    (this.Descripcion != null &&
                    this.Descripcion.Equals(input.Descripcion))
                ) && 
                (
                    this.Estado == input.Estado ||
                    (this.Estado != null &&
                    this.Estado.Equals(input.Estado))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Descripcion != null)
                    hashCode = hashCode * 59 + this.Descripcion.GetHashCode();
                if (this.Estado != null)
                    hashCode = hashCode * 59 + this.Estado.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
